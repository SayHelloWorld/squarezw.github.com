<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xcode | square's blog]]></title>
  <link href="http://doruby.com/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://doruby.com/"/>
  <updated>2014-02-24T18:29:18+08:00</updated>
  <id>http://doruby.com/</id>
  <author>
    <name><![CDATA[square]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Xcode里,为项目定义不同的环境配置]]></title>
    <link href="http://doruby.com/blog/2013/02/28/env-of-project-on-xcode/"/>
    <updated>2013-02-28T09:30:00+08:00</updated>
    <id>http://doruby.com/blog/2013/02/28/env-of-project-on-xcode</id>
    <content type="html"><![CDATA[<p>有时项目经常需要配置不同的开发环境，比如Debug, QA, Release, Distribution等。每个环境下，会有各自不同的环境配置项，比如变量，常量，宏定义等。</p>

<p>我们最早的方法是先在Build Settings里先设定 Preprocessor Macros CONFIGURATION_$(CONFIGURATION)</p>

<p>这样我们就可以在代码根据该 Macro 来区分现在所处的环境。通过我们是定义在 Prefix.pch 文件里:</p>

<p>``` objc</p>

<h1>ifdef CONFIGURATION_Debug</h1>

<h1>import "ConfigDebug.h"</h1>

<h1>else</h1>

<h1>...</h1>

<h1>endif</h1>

<p>```</p>

<p>现在想到的更好的方法是直接修改Prefix Header的引用路径</p>

<p>在 Project 里的 Build Settings 里设定 Prefix Header 文件的导入位置.</p>

<p><img src="/assets/settingsPrefixHeader.png" alt="settings prefix header" /></p>

<p>比如: Test/Config/Test-Prefix-${CONFIGURATION}.pch</p>

<p>我们新建了一个Config目录，然后在里面添加了 Test-Prefix-Debug.pch , Test-Prefix-Release.pch 等不同的环境配置文件.</p>

<p>Test-Prefix-Debug.pch</p>

<p><code>objc
import "ConfigDebug.h"
...
</code></p>

<p>Test-Prefix-Release.pch</p>

<p><code>objc
import "ConfigRelease.h"
...
</code></p>

<h2>关于各项环境配置应该放在哪儿比较好?</h2>

<!-- more -->


<p>我们有时会定义一些自己的Macro, 通常我们也是象上面一样写在Preprocessor Macros 里。 实际上更好的方法是建立不同的 .xcconfig 文件, 然后将Target的配置指向它们</p>

<p>比如我们建立一个 Debug.xcconfig, Release.xcconfig</p>

<p>将 PROJECT Info => Configurations => target Based on Configuration File 指向不同环境下的config文件。</p>

<p><img src="/assets/targetConfigurations.png" alt="target configurations" /></p>

<p>我们就可以在这个文件上定义自己的Macro了，比如</p>

<p>Debug.xcconfig</p>

<p><code>objc
TestMacroDef = 1
</code></p>

<p>Release.xcconfig</p>

<p><code>objc
TestMacroDef = 0
</code></p>

<p>你可以在Build Settings中看到User-Defined一栏多了你自定义的Macro</p>

<p>我们还可以改变或添加系统默认的定义，比如上面在 Preprocessor Macros里定义的内容，可以这样写</p>

<p><code>objc
GCC_PREPROCESSOR_DEFINITIONS = kShareKey=1 $(inherited) // inherited 是继承原有的定义
</code></p>

<p>tips: 你可以选中settings的一栏copy， paste 到这个文件中，即可知道定义方法。</p>

<p>如果我们有一些公共的配置文件，可以创建一个 公共的 xcconfig 文件，然后 include 进来即可。</p>

<p>比如</p>

<p>Debug.xcconfig</p>

<p>``` objc</p>

<h1>include "Shared.xcconfig"</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
