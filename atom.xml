<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[square's blog]]></title>
  <link href="http://doruby.com/atom.xml" rel="self"/>
  <link href="http://doruby.com/"/>
  <updated>2014-02-24T18:29:18+08:00</updated>
  <id>http://doruby.com/</id>
  <author>
    <name><![CDATA[square]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIKit Class Hierarchy]]></title>
    <link href="http://doruby.com/blog/2014/02/24/uikit-class-hierarchy/"/>
    <updated>2014-02-24T16:17:00+08:00</updated>
    <id>http://doruby.com/blog/2014/02/24/uikit-class-hierarchy</id>
    <content type="html"><![CDATA[<p>是时候复习一下基础内容了，先从最常用到的 UIKit 开始吧。</p>

<p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIKit_Framework/Introduction/Introduction.html">UIKit reference introduction</a></p>

<p>先看看这个层级结构图吧：
<img src="https://developer.apple.com/library/ios/documentation/uikit/reference/UIKit_Framework/Art/uikit_classes.jpg" alt="image" /></p>

<hr />

<h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIAcceleration_Class/Reference/UIAcceleration.html">UIAcceleration</a>:</h2>

<p>加速计类: 加速度实为UIAcceleration对象实例，又被称为加速事件，它代表即时的三维空间上，三个不同轴上的加速度数据。</p>

<p><img src="https://developer.apple.com/library/ios/documentation/uikit/reference/UIAcceleration_Class/Art/device_axes.jpg" alt="加速计三维空间" /></p>

<p> 实用的场景中可以用于“摇晃”，游戏中用于控制对象移动等。</p>

<p><em>iOS 5.0之后，它被放在了 CoreMotion 框架里</em></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIAccelerometer_Class/Reference/UIAccelerometer.html">UIAccelerometer</a></h2></li>
</ul>


<p> 获得当前设备的加速计单例，里面的delegate 可以获得 UIAcceleration 的实例</p>

<p><em>iOS 5.0之后，它被放在了 CoreMotion 框架里</em></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIAccessibilityElement_Class/Reference/Reference.html">UIAccessibilityElement</a></h2></li>
</ul>


<p> 这个类封装的是可便捷的访问信息，主要是针对一些特殊人群，比如颜色识别有困难，残障人士等。 默认情况下你的设备设定中是不开启的，如果你要开启时，可以在设置里的Accessibility中打开相应的辅助功能。</p>

<p><em>原生的UI组件的<code>isAccessibilityElement</code>默认是YES的。自定义的UI组件的isAccessibilityElement属性是NO，当<code>isAccessibilityElement</code>为NO时，instruments将无法捕获。所以这种情况，我们需要将自定义UI的的isAccessibilityElement属性置为YES，instruments就能获取到。</em></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIBarItem_Class/Reference/Reference.html">UIBarItem</a></h2></li>
</ul>


<p>UIBarItem 是一个抽象的超类，用来在Bar上添加道具。 类似于一个按钮。有标题，有图片，动作和 目标。</p>

<h4><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIBarButtonItem_Class/Reference/Reference.html">UIBarButtonItem</a></h4>

<p>这个类的实例是用在 UIToolbar 或 UINavigationBar 上的专用对象按钮。它从它的抽象父类 UIBarItem 继承的基本按钮的行为。比如 NavigationBar 的返回，关闭按钮。</p>

<h4><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITabBarItem_Class/Reference/Reference.html">UITabBarItem</a></h4>

<p>这个类的实现，用于 Tabbar 上的按钮对象。</p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIBezierPath_class/Reference/Reference.html">UIBezierPath</a></h2></li>
</ul>


<p>UIBezierPath类可以创建基于矢量的路径。</p>

<p>此类是Core Graphics框架关于path的一个封装。使用此类可以定义简单的形状，如椭圆或者矩形，或者有多个直线和曲线段组成的形状。</p>

<p>它还提供了添加二次贝塞尔曲线和三次贝塞尔曲线的支持。</p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIColor_Class/Reference/Reference.html">UIColor</a></h2></li>
</ul>


<p>绘制UI中用的最多的一个类了吧，一个 UIColor 对象代表颜色，alpha 值。可以使用 UIColor 对象来存储颜色数据，并在绘画过程中，你可以用它们来设置当前填充和笔触颜色。</p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html">UIDecive</a></h2></li>
</ul>


<p>UIDevice类提供了一个单例代表当前设备。从这个实例中，可以获取有关设备的唯一的ID，分配名称，设备型号，和操作系统名称和版本等信息。也可以使用的UIDevice实例，检测设备的特点， 如物理方向的变化。</p>

<p><em>常用在判断 iOS 版本。</em></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentInteractionController_class/Reference/Reference.html">UIDocumentInteractionController</a></h2></li>
</ul>


<p>文件交互控制器委托对象，提供应用程序管理与本地系统中的文件的用户交互的支持。例如，一个电子邮件程序可能使用这个类，允许用户预览附件和其他应用程序中打开它们。使用这个类， 目前预览相应的用户界面，打开，复制或打印指定的文件。</p>

<p>一般在程序间共享文档可以通过UIDocumentInteractionController（该类经常被开发者忽略），用其它APP预览PDF文档等。</p>

<p>第三方程序只需要通过在info.plist 中注册支持的相关格式，并安装到ios设备中，便可以自由打开，无需你程序中自己检测第三方程序是否安装，而且文件之间的传输也实现了跨出沙盒的功能。</p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIEvent_Class/Reference/Reference.html">UIEvent</a></h2></li>
</ul>


<p>一个 UIEvent 对象（或者简单地说，一个事件对象）在 IOS 中有三种类型的事件：触摸事件(Touch)，运动事件(Motion)和远程控制(RemoteControl)事件。远程控制的事件使一个 Responder 对象来接收来自外部的 附件或耳机的命令，以便它可以管理管理音频和视频，例如，播放视频或跳过到下一音轨。</p>

<p><img src="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Art/events_to_app_2x.png" alt="event handling" /></p>

<p>触摸事件，会经过一系列的响应链，最后被 UIResponder 接受到。并回调：touchesBegan:withEvent: 方法。</p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIFont_Class/Reference/Reference.html">UIFont</a></h2></li>
</ul>


<p>同样常用的字体设定类，提供了用于获取和设置字体信息的接口。</p>

<p>除了使用系统指定的字体外，还可以使用自定义的字体，只需要将自定义字体加到你的工程资源文件中，并在 info.plist 文件中增加一名为 UIAppFonts 的key。将这个key修改成array
将你用到的所有字体的名字，作为这个array的值，一项一项填进去（包括扩展名），然后就可以在代码中直接用[UIFont fontWithName:@”CustomFontName” size:12]取得自定义的字体了。</p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIGestureRecognizer_Class/Reference/Reference.html">UIGestureRecognizer</a></h2>

<p>  UIGestureRecognizer 是手势识别的抽象基类。它有以下具体的子类：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UITapGestureRecognizer: 点击手势，可以识别单次与多次点击
</span><span class='line'>UIPinchGestureRecognizer: 缩放手势
</span><span class='line'>UIRotationGestureRecognizer: 旋转手势
</span><span class='line'>UISwipeGestureRecognizer: 滑动手势
</span><span class='line'>UIPanGestureRecognizer: 拖动手势
</span><span class='line'>UILongPressGestureRecognizer: 长按手势</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIImage_Class/Reference/Reference.html">UIImage</a></h2></li>
</ul>


<p>UIImage 封装了显示图片的高层级方法，你可以从 文件 ，Quartz ，原始图片数据对象（相机，扫描仪等）中创建。</p>

<p>支持的文件格式：</p>

<p><code>.tiff, .tif, .jpg, .jpeg, .gif, .png, .bmp, .BMPf, .ico, .cur, .xbm</code></p>

<p><em>可通过 UIImagePickerController 类从iPhone照片库或照相机获取图像</em></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UILocalizedIndexedCollation_Class/UILocalizedIndexedCollation.html">UILocalizedIndexedCollation</a></h2>

<p>  提供索引标题的类，常用在TableView的右方索引列。</p></li>
</ul>


<p><img src="http://doruby.com/assets/localized_index.png" alt="localized index" /></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UIMenuController_Class/UIMenuController.html">UIMenuController</a></h2>

<p>  菜单控制器，默认的单例方法，提供了剪切，复制，粘贴， 选择，选择，和删除功能。你也可以创建自定义的 UIMenuController，</p></li>
</ul>


<p><img src="http://doruby.com/assets/UIMenuController.jpeg" alt="UIMenuController" /></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIMenuItem_Class/Reference/MenuItem.html">UIMenuItem</a></h2>

<p>  是UIMenuController 的 menuItems 数组里的每个实例。你可以自行定义他们，它只需要两个属性，title 与 action (SEL)</p></li>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UINavigationItem_Class/Reference/UINavigationItem.html">UINavigationItem</a></h2>

<p>  一个UINavigationItem 管理显示在 UINavigationBar 上的按钮和视图对象。每个 View Controller push 到 navigation 栈上，必须有一个在 NavigationBar 上包含按钮与被显示的视图 UINavigationItem 对象。</p></li>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UINib_Ref/Reference/Reference.html">UINib</a></h2>

<p>  UINib 可以从 Interface Builder nib 文件中将数据进行封装，并将它进行实例化缓存起来。当你需要用到 nib 时，不必去读 nib 文件了。</p>

<p>  比如：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Load the hoverView from HoverView.xib
</span><span class='line'>UINib *hoverViewXib = [UINib nibWithNibName:@"HoverView" bundle:nil];
</span><span class='line'>[hoverViewXib instantiateWithOwner:self options:nil];</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPasteboard_Class/Reference.html">UIPasteboard</a></h2>

<p>  读写系统里的剪贴版内容</p></li>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPopoverController_class/Reference/Reference.html">UIPopoverController</a></h2>

<p>  iPad 里的专有 Controller, 效果如下：</p></li>
</ul>


<p><img src="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewControllerCatalog/Art/splitview_portrait_popover.jpg" alt="UIPopoverController" /></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPrintFormatter_Class/Reference/Reference.html">UIPrintFormatter</a></h2></li>
</ul>


<p>打印格式的抽象基类，可定制打印的页边距等。具体实现类有如下三种：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UISimpleTextPrintFormatter
</span><span class='line'>UIMarkupTextPrintFormatter
</span><span class='line'>UIViewPrintFormatter</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPrintInfo_Class/Reference/Reference.html">UIPrintInfo</a></h2>

<p>  封装了关于打印工作的信息，包括打印的id,名称,输出类型，方向，双面打印模式。当它需要打印时，这些信息会被打印系统使用。</p></li>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPrintInteractionController_Class/Reference/Reference.html#//apple_ref/occ/cl/UIPrintInteractionController">UIPrintInteractionController</a></h2>

<p>  它包括了打印的UI与，打印文稿，图片和其它打印内容之间的典型交互情景。你可以使用 UIPrintInteractionController 单例方法，将整个打印过程进行控制。</p></li>
</ul>


<p><img src="https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Art/print_options_ipad_2x.png" alt="UIPrint Center" /></p>

<ul>
<li><h2><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIResponder_Class/Reference/Reference.html">UIResponder</a></h2></li>
</ul>


<p>该UIResponder类定义了响应和处理事件的对象接口。它是UIApplication，UIView的和它的子类（包括UIWindow）的父类。这些类的实例通常被作为应答对象，或者简单地说，应答者。</p>

<p>通常有两种类型的事件：触摸与运动事件。主要的触摸事件处理方法有  touchesBegan:withEvent:,touchesMoved:withEvent:, touchesEnded:withEvent:, and touchesCancelled:withEvent:. 这些方法的参数和他们新的，或有改变的特别触摸事件有关。这样响应对象可以跟踪和处理这些事件。任何时候当手指触摸屏幕，拖动，抬起时，UIEvent 对象都会被创建，这个事件对象包括了所有刚从屏幕抬起时的手指的 UITouch 对象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-touchesBegan:withEvent: // 当用户触摸到屏幕时调用方法
</span><span class='line'>-touchesEnded:withEvent: // 当用户触摸到屏幕并移动时调用此方法
</span><span class='line'>-touchesMoved:withEvent: // 当触摸离开屏幕时调用此方法
</span><span class='line'>-touchesCancled:withEvent: // 当触摸被取消时调用此方法</span></code></pre></td></tr></table></div></figure>


<p>通俗一点说，一个 UIResponder 对象表示一个可以接收触摸屏上的触摸事件的对象, iOS 中，所有显示在界面上的对象都是从 UIResponder 直接或间接继承的。</p>

<p>iOS 3 之后开始支持运动事件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-motionBegan:withEvent: // 运动开始时执行
</span><span class='line'>-motionEnded:withEvent: // 运动结束时执行
</span><span class='line'>-motionCancled:withEvent: // 运动被取消时执行</span></code></pre></td></tr></table></div></figure>


<p>iOS 4 之后开始支持远程控制事件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-remoteControlReceivedWithEvent</span></code></pre></td></tr></table></div></figure>


<p>接收事件之后，使用到的响应链函数
<code>-nextResponder</code> 下一个响应者，在通常的UIView 实现中，一般会返回父级对象</p>

<p><em>所以你可以自行改变响应链的响应路径</em></p>

<p><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW2">响应链</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-isFirstResponder  指示对象是否为第一响应者，这里的第一响应者就是当前焦点
</span><span class='line'>-canBecomeFirstResponder 布尔值，指定对象是否可以变为第一响应者
</span><span class='line'>-becomeFirstResponder   把对象设置为 firstResponder
</span><span class='line'>-canResignFirstResponder   对象是否可以取消 firstResponder
</span><span class='line'>-resignFirstResponder 注销 firstResponder</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIApplication_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40006728-CH3-DontLinkElementID_1">UIApplication</a></h4></li>
</ul>


<p>这个UIApplication类提供运行在 iOS 上的 app 的集中协调与控制中心，每个 app 只有一个它的实例。当 app 启动时，UIApplicationMain 函数被调用，他会创建一个 UIApplication的单例对象。之后，你就可以通过 sharedApplication 类方法访问到它。</p>

<p>如我们在 main.c 文件中看到的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>return UIApplicationMain(argc, argv, nil, NSStringFromClass([SomeAppDelegate class]));</span></code></pre></td></tr></table></div></figure>


<p>UIApplication 的主要任务是处理传入的用户事件的初始路由。此外，他还维护所有当前打开的窗口列表（UIWindow 对象），所以通过它你可以检索到应用程序的UIView对象。</p>

<p>这个app对象通常分配一个 delegate,接受一些运行时的标致性的通知，比如：app 启动，低内存，app 关闭，然后作出响应。</p>

<p>UIApplication 允许你管理设备的以下几种行为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>控制界面方向
</span><span class='line'>
</span><span class='line'>挂起传入的触摸事件
</span><span class='line'>
</span><span class='line'>接近感应（用户面部）开和关
</span><span class='line'>
</span><span class='line'>注册远程通知
</span><span class='line'>
</span><span class='line'>触发撤销重做 UI
</span><span class='line'>
</span><span class='line'>判断是打开app 还是 URL
</span><span class='line'>
</span><span class='line'>退到后台时继续执行任务
</span><span class='line'>
</span><span class='line'>注册或取消本地通知
</span><span class='line'>
</span><span class='line'>执行 app 级别的恢复任务</span></code></pre></td></tr></table></div></figure>


<p>UIApplication 定义的 delegate 必须遵循 UIApplicationDelegate 协议并且实现一些协议的方法</p>

<hr />

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/uiview/uiview.html">UIView</a></p>

<p>  UIView 类定义了一个矩形区域和管理该区域的接口。在运行时，一个 view 对象在它的区域内进行绘制和处理这些内容的交互。UIView 类本身也提供了一些带背景色的基本填充行为。更多精妙的内容，可以通过你自定义的子类实现一些所须的绘制和交互处理达成。</p>

<p>  另外UIKit 框架也自带了一些标准子类，从简单的按钮到复杂的表格都能被使用。例如: UILabel 可以绘制文本内容，UIImageView 绘制一个图片.</p>

<p>  参考：
  <a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/WindowsandViews/WindowsandViews.html#//apple_ref/doc/uid/TP40009503-CH2-SW1">View 与 Window 架构</a></p>

<p>  <a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/AnimatingViews/AnimatingViews.html#//apple_ref/doc/uid/TP40009503-CH6-SW1">View 动画</a></p>

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIWindow_Class/UIWindowClassReference/UIWindowClassReference.html">UIWindow</a></p>

<p>  UIWindow 类定义了被称为 window 的对象，它用来管理和协调在设备屏幕上出现的view。除非app有其它外部屏幕上，否则一个app只有一个 window</p>

<p>  一个 window的主要两个功能是提供view的显示区域和发配事件到view上，要想改变你的显示内容，你可以改变 window的 root view ,但你不能创建一个新的 window. 一个 window有一个明确的等级结构, UIWindowLevelNormal&#8211;表示它相对其它 windows的z轴位置. 例如一个系统提示window出现在 normal window 上面。</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UILabel_Class/Reference/UILabel.html">UILabel</a></p>

<p>  UILabel 类实现了只读文本 view. 你能使用这个类画一行或多行静态文本。基本的 UILabel 支持简单和复杂的文本样式。你也可以控制它上面的样式，比如使用shadow 绘制阴影或高亮。如果需要，你可以通过子类来实现更加个性化的样式。</p>

<p>  参考:
  <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/UsingTextClasses/UsingTextClasses.html#//apple_ref/doc/uid/TP40009542-CH2-SW1">在iOS上显示文本内容</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPickerView_Class/Reference/UIPickerView.html">UIPickerView</a></p>

<p>  UIPickerView 的实现对象叫做 picker view, 它使用类似角子机（赌场里经常见的777机器）来显示一个或多个值的设置。用户通过滚动轮子来选择对应的行的值。</p>

<p>  你也可以通过子类来定制显示内容。这个UI由包括(component)元件和行构成。元件是一个滚轮，在上面是一连串一行行的索引内容。在 picker view 上不同的元件从左至右顺虚排列。每一行的内容可以是一个字符串或view 对象。比如 UILabel 或 UIImageView.</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uipickerview_intro.png" alt="Picker View" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIProgressView_Class/Reference/Reference.html">UIProgressView</a></p>

<p>  UIProgressView 类表现了一个进度条描述进展的时间。它也支持管理样式的属性。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uiprogressview_intro_2x.png" alt="UI progress view" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIActivityIndicatorView_Class/Reference/UIActivityIndicatorView.html">UIActivityIndicatorView</a></p>

<p>  使用一个动态的指示器显示内容正在执行中，它就象一个活动的齿轮。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uiactivityindicator_intro.png" alt="UI activity indicator" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIImageView_Class/Reference/Reference.html">UIImageView</a></p>

<p>  一个 image view 对象支持基本的视图容器，可以显示单张图片或几个动画图片。如果是动画图片，UIImageView 类支持控制动画的持续时间和频率，你也可以自由的开始和停止动画。</p>

<ul>
<li>iOS 6 之后，支持 “状态保留” 机制，同样也可以用于这里.</li>
</ul>
</li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITabBar_Class/Reference/Reference.html">UITabBar</a></p>

<p>  一个 tabbar 是一个控制器，通常在tab bar controller上下文中，它显示屏幕的底部。在 tab bar 上的每一个按钮是一个叫 UITabBarItem 的类的实例。如果你想替换Bar上的按钮执行不同的 action ，可以使用 UIToolbar 对象。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uitabbar_intro_2x.png" alt="UI tab bar" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIToolbar_Class/Reference/Reference.html">UIToolbar</a></p>

<p>  一个 toolbar 可以控制显示一个或更多的按钮，叫 toolbar items. 要创建 toolbar items, 使用 UIBarButtonItem 类。 要添加 toolbar items 到 toolbar 上，使用 setItems:animated: 方法</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uitoolbar_intro_2x.png" alt="UI tool bar" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UINavigationBar_Class/Reference/UINavigationBar.html">UINavigationBar</a></p>

<p>  这个 UINavigationBar 类用于控制导航栏内容。它是一个bar,通常显示上屏幕的最上方。主要的属性有一个左（返回）按钮，一个中心标题，和可选择的右侧按钮。你可以使用navigation bar 作为一个标准对象或结合 navigation controller 使用.</p>

<p>  在iOS5之后，你也可以自行定制它的样式.</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uinavbar_intro_2x.png" alt="UI nav bar" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITableViewCell_Class/Reference/Reference.html">UITableViewCell</a></p>

<p>  UITableViewCell 定义了在 UITableView 对象里的每cell的属性和行为。这个类包括了为设置和管理 cell 内容和背景的属性和方法（包括文本，图片，自定义的 view），管理 cell的选择，高亮状态，管理附属 view和初始编辑中 cell 内容。</p>

<p>  参考：
  <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/TableViewCells/TableViewCells.html#//apple_ref/doc/uid/TP40007451-CH7">TableViewCell 详解</a></p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/Art/tv_cell_parts.jpg" alt="cell part" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIActionSheet_Class/Reference/Reference.html">UIActionSheet</a></p>

<p>  UIActionSheet 提供了一个单选器，你也可以通过它来提示用户哪些是危险的操作。这个Action sheet 包括一个可选择的标题和一个或多个按钮，每个按钮都代表一个action</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uiactionsheet_intro_2x.png" alt="ui action sheet" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIAlertView_Class/UIAlertView/UIAlertView.html">UIAlertView</a></p>

<p>  使用 UIAlertView 用于提示用户一些信息，这个 alert View 类似但和 action sheet 表现上不一样。</p>

<p>  使用类提供的属性和方法设定 title, message, 和代理来配置按钮。如果你要添加一个自定义的按钮，你必须设定一个delegate. 这个代理一定要遵循 UIAlertViewDelegate 协议。使用 show 方法来显示 alert view.</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uialertview_intro_2x.png" alt="ui alert view" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIScrollView_Class/Reference/UIScrollView.html">UIScrollView</a></p>

<p>  UIScrollView 类提供了为显示超过一屏的超长内容的支持。它让用户可以支持滑动手势和收缩手势浏览内容。</p>

<p>  UIScrollView 也是一些 UIKit 类，包括 UITableView 和 UITextView 的超类。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uiscrollview_intro.png" alt="UI scroll view" /></p>

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITableView_Class/Reference/Reference.html">UITableView</a></p>

<p>  UITableView 实例是为显示和编辑列表信息。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/Art/tv_plain_style.jpg" alt="UI table view" /></p>

<p>  非常详细的文档：
  <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/TableViewStyles/TableViewCharacteristics.html#//apple_ref/doc/uid/TP40007451">Table View Programming Guide for iOS</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uitextview_class/Reference/UITextView.html">UITextView</a></p>

<p>  UITextView 类实现了滚动的行为，多行文本区域. 这个类支持定制的文本样式，也支持文本编辑。通常用来显示多行文本，比如一个比较长的文档时。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uitextview_intro_2x.png" alt="UI text view" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UISearchBar_Class/Reference.html">UISearchBar</a></p>

<p>  这个 UISearchBar 类实现了一个文本控制器为搜索提供基本的文字输入，这个控制器提供了一个文本输入区域作为文本输入，一个搜索按钮，一个书签按钮，一个取消按钮。这个 UISearchBar 对象实现上不执行搜索操作，你需要使用 遵循 UISearchBarDelegate 协议的delegate，当文本输入和按钮点击时实现它的action。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uisearchbar_intro_2x.png" alt="UI search bar" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIWebView_Class/Reference/Reference.html">UIWebView</a></p>

<p>  你可以在应用使用 UIWebView 类嵌入 web 内容。你可以非常简单的创建 UIWebView对象附加了 window上，并发送请求 web 内容。你也可以使用这个类进行返回前进到历史页面，并且你甚至可以以编程方式设定 web 内容属性。</p>

<p>  参考：
  <a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/Introduction/Introduction.html#//apple_ref/doc/uid/TP40002051">Safari Web Content Guide</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uicontrol_class/reference/reference.html">UIControl</a></p>

<p>  UIControl 是所有 control 对象的基础类，比如 UIButton 和 滚动条 等，他将用户的意图传递给应用。你不能直接实例化 UIControl 类, 代替它的是一些常用的UI子类.</p>

<p>  UIControl 主要的任务是定义了一个接口，并且有一些基本实现，当一些事件调用时，会首先调用它们到它们的对象。</p>

<p>  为了说明 target-action 原理，可以在Cocoa Fundamentals Guide 看&#8221;Target-Action in UIKit&#8221; 。如果要了解 Multi-Touch 事件信息,可以看 <a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009541">Event Handling Guide for iOS</a></p>

<p>  UIControl 类也包括了 getting 和 setting control 状态的方法，如，为了确定control是否打开或者高亮。并且它还在内部定义一些触摸的跟踪方法，这些跟踪方法可以被子类覆盖。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uicontrol_intro_2x.png" alt="about UI Control" /></p>

<p>  参考：<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/UIControl.html#//apple_ref/doc/uid/TP40012857-UIControl">About Controls</a></p>

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIButton_Class/UIButton/UIButton.html">UIButton</a></p>

<p>  一个 UIButton的实例实现了在屏幕上的按钮。当点击它时button截获触摸事件并发送 action 消息到 target 对象. 这个类支持设置title,image和其它外观属性方法。你还可以为不同的状态设定不同的表现形式。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uibutton_intro.png" alt="UI button" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIDatePicker_Class/Reference/UIDatePicker.html">UIDatePicker</a></p>

<p>  这个UIDatePicker类实现了一个使用多个齿轮对象，让用户选择日期和时间。iPhone 时间picker例子是一个时间闹钟设定应用，你也可以用它做为一个倒计时器。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uidatepicker_intro_2x.png" alt="UI date picker" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIPageControl_Class/Reference/Reference.html">UIPageControl</a></p>

<p>  你可以用UIPageControl 类来创建和管理页码 control. 一个页码 control 显示一个水平的连续小点，每个点代表了文档的一部分。当前显示的页用白色的点表示。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uipagecontrol_intro_2x.png" alt="page control" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UISegmentedControl_Class/Reference/UISegmentedControl.html">UISegmentedControl</a></p>

<p>  一个 UISegmentedControl 对象是一个由多个部分组成的水平control ，每个部分作为一独立的按钮。</p>

<p>  一个 segmented control 可以显示一个title (一个 NSString 对象)或一个图片（UIImage 对象）.这个 UISegmentedControl 对象自动调整他们的大小比例在他们的父视图下，除非他们有一个指定的宽度设置。当你添加和删除部分片段时，你可以请求这个action ，他会有滑动和消退效果。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uisegmentedcontrol_intro_2x.png" alt="UI Segmented control" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITextField_Class/Reference/UITextField.html">UITextField</a></p>

<p>  一个 UITextField 也是一个 control 对象，它是一个显示可编辑文本，并且当用户按下return按钮时发送 action 消息到对象。你典型的使用场景是，搜集用户一定数量的文本，并且马上执行一些action ,比如基于文本的搜索操作。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uitextfield_intro_2x.png" alt="UI text field" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISlider_Class/Reference/Reference.html">UISilder</a></p>

<p>  一个 UISilder 对象是一个可视化的 control , 它使用一个连续的值范围进行选择， Slider 通常显示为水平的滑动条。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uislider_intro_2x.png" alt="UI slider" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UISwitch_Class/Reference/Reference.html">UISwitch</a></p>

<p>  你可以使用 UISwitch 类来创建和管理 On / Off 按钮。例如，在设置飞行模式和蓝牙设置时。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/UIKitUICatalog/Art/uiswitch_on_2x.png" alt="UI switch" /></p></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/Reference/Reference.html">UIViewController</a></p>

<p>  这个 UIViewController 类提供了基本的 view 管理模型。你很少直接实例化UIViewController对象。相反,你实例化UIViewController类的子类执行特定的任务。</p>

<p>  视图控制器管理一组视图组成应用程序的用户界面的一部分.作为应用程序的控制器层的一部分, 视图控制器和其它模型对象，其它视图控制器一起构成了一个一致的用户界面。</p>

<p>  必要时，一个视图控制器可以：</p>

<ul>
<li>调整和排版他们的 view</li>
<li>调整 view 里的内容</li>
<li>当用户与他们交互时，反应他们与视图的效果。</li>
</ul>


<p>  参考：
  <a href="https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007457">View Controller Programming Guide for iOS</a></p>

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UISplitViewController_class/Reference/Reference.html">UISplitViewController</a></p>

<p>  UISplitViewController是一个管理包含了两边ViewController的视图控制器，你使用这个类去实现主－从界面, 在左边显示的是列表视图控制器，右边是左边点击后的详细视图控制器。它只能适用于 iPad 设备。尝试去用到其它设备都会出现异常。</p>

<p>  它没有特定的界面，他的主要工作是管理两个视图控制器在切换方向时的表现形式。</p>

<p>  <img src="http://doruby.com/assets/ui_split_view_controller.jpg" alt="ui split view controller" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITabBarController_Class/Reference/Reference.html">UITabBarController</a></p>

<p>  UITabBarController 类实现了一个专门的类似radio-style的视图控制器管理界面。这个标签栏界面的标签显示在窗口的底部。它通常按它原来的样式显示，不过在 iOS6 之后可以用子类显示。</p>

<p>  每个标签栏控制器的标签对应一个定制的视图控制器。当用户选择一个指定的标签地，这个标签栏控制器替换之前的主视图为相关的视图控制器.</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/uikit/reference/UITabBarController_Class/Art/tabbar_controllerviews.jpg" alt="Tab bar controller views" /></p>

<p>  你不能直接访问标签控制器上的标签视图。要配置这个标签，你可以分配这个 viewControllers 属性来提供根视图。它的显示顺序也是由你分配viewControllers时的顺序来确定的。</p>

<p>  标签栏内容是通过他们相应的视图控制器进行配置，通过创建一个UITabBarItem 类的实例来生成标签内容，配置合适的属性，然后赋给视图控制器的tabBarItem属性.如果你没有提供定制的标签栏内容，那它默认只会显示一个这个视图控制器的标题。</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITableViewController_Class/Reference/Reference.html">UITableViewController</a></p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/Art/tv_plain_style.jpg" alt="Table View" /></p>

<p>  UITableViewController 类创建了一个控制器管理表格视图. 它实现了下列行为:</p>

<ul>
<li><p>如果nib 文件通过 initWithNibName:bundle: 方法指定(它是父类 UIViewController 声明的方法), UITableViewController 会从这个nib文件中读取这个表格视图结构。否则，它是不能正确配置UITableView对象和计算大小的。你可以通过tableview属性来设置它。</p></li>
<li><p>如果包含表视图的nib文件加载后，datasource(数据源)和delegate(委托)为nib文件中定义的对象(如果有的话).如果没有指定nib文件或者nib文件定义没有datasource或delegate, UITableViewController 设置表视图的datasource 与 delegate为它自己(self)</p></li>
<li><p>当表视图第一次出现时，table-view controller重新加载表视图数据。它也在每次显示时清理了选择过的行。这个 UITableViewController 类的方法是在基于父类方法的viewWillAppear:时实现的。你也可以关闭这个默认行为，通过clearsSelectionOnViewWillAppear属性。</p></li>
<li><p>当表视图被显示后，控制器刷新表视图的滚动条指示器。这个 UITableViewController 类的方法是实现在 viewDidAppear: 里的。</p></li>
<li><p>它实现了父类方法 setEditing:animated:, 所以当用户点击导航栏上的编辑|完成按钮时，会控制表格的编辑模式。</p></li>
</ul>


<p>  你可以创建它的子类来管理每个表视图。当你在控制器里初始化了 initWithStyle:，你必须指定表视图的样式（plain 或 grouped）。</p>

<p>  参考：
  <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/TableViewStyles/TableViewCharacteristics.html#//apple_ref/doc/uid/TP40007451">Table View Programming Guide for iOS</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/Documentation/UIKit/Reference/UINavigationController_Class/Reference/Reference.html">UINavigationController</a></p>

<p>  UINavigationController 类实现了一专门的视图控制器去管理分层内容的导航。它的导航界面让数据更有效，更简单的呈现。通常你直接使用它即可。iOS 6之后你可以定制它的行为。</p>

<p>  <img src="https://developer.apple.com/library/ios/Documentation/UIKit/Reference/UINavigationController_Class/Art/navigation_interface_2x.png" alt="A sample navigation interface" /></p>

<p>  导航控制器使用导航栈管理屏幕上的显示内容，它是一个视图控制器数据，数据第一个控制器对应的是根视图控制器，最后一个视图控制器对应的是当前屏幕上显示的内容。你可以使用导航控制器类代的方法编辑这个栈。比如你添加一个视图控制器到栈顶用 pushViewController:animated: 方法。</p>

<p>  <img src="https://developer.apple.com/library/ios/Documentation/UIKit/Reference/UINavigationController_Class/Art/NavigationViews_2x.png" alt="The views of a navigation controller" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIImagePickerController_Class/UIImagePickerController/UIImagePickerController.html">UIImagePickerController</a></p>

<p>  UIImagePickerController类管理可定制的，系统提供的用户界面，用于拍照和电影支持的设备上，并选择保存的图像和电影用于您的应用程序.一个图像选择控制器管理用户交互,并通过delegate对象传递交互的结果.</p>

<p>  它的交互外观由 source type 决定：</p>

<ul>
<li>UIImagePickerControllerSourceTypeCamera 类型提供一个获得新照片或电影的交互界面（设备必须支持媒体捕获）</li>
<li>UIImagePickerControllerSourceTypePhotoLibrary 或 UIImagePickerControllerSourceTypeSavedPhotosAlbum 这两个类型提供选择已保存在设备上的照片或电影</li>
</ul>


<p>  <img src="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/CameraAndPhotoLib_TopicsForIOS/Art/UIImagePickerController.jpg" alt="Taking Pictures and Movies" /></p>

<p>  参考：
  <a href="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/CameraAndPhotoLib_TopicsForIOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010400">Camera Programming Topics for iOS</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIVideoEditorController_ClassReference/Reference/Reference.html">UIVideoEditorController</a></p>

<p>  一个UIVideoEditorController对象，或视频编辑器，管理系统提供的视频微调界面，从视频的开头到结尾帧都可以进行管理。并可以重新调整编码质量。这个对象管理用户交互，并提供电影编辑的文件路径给到你的delegate 对象 (<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIVideoEditorControllerDelegate_ProtocolReference/Reference/Reference.html#//apple_ref/doc/uid/TP40009028">UIVideoEditorControllerDelegate Protocol Reference</a>)。这个特性只支持有视频录制的设备上。</p>

<p>  <img src="http://doruby.com/assets/editing_video_controller.jpg" alt="editing video controller" /></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIScreen_Class/Reference/UIScreen.html">UIScreen</a></p>

<p>  UIScreen对象包含设备的整个屏幕矩形边界。设置应用程序的用户界面时, 你应该使用该对象的推荐矩形属性设置应用程序的窗口。</p>

<p>  你可以通过它，获得整个设备的屏幕的宽，高。</p>

<p>  通常我们在didFinishLaunchingWithOptions: 方法里经常看到这样一句话：</p>

<pre><code>  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
</code></pre></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIScreenMode_class/Reference/Reference.html">UIScreenMode</a></p>

<p>  UIScreenMode对象代表一组可以应用于一个UIScreen对象的属性.对象封装的信息是屏幕的基本显示缓冲区的大小和长宽比，及它使用的独立像素。</p>

<p>  开发者可以不必关心这个属性，屏幕和窗口对象会根据底层硬件自动确定像素和长宽比等。不过你要是想用到像素级信息，可以考虑用它来设置。</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UISearchDisplayController_Class/Reference/Reference.html">UISearchDisplayController</a></p>

<p>  一个搜索控制器用于管理搜索状态栏和伴随搜索结果的视图表。</p>

<p>  你初始化一个带搜索栏的搜索显示控制器和视图控制器负责管理数据搜索.当用户开始搜索时， 搜索控制器添加搜索界面在原视图控制器上，当搜索后，显示一个搜索结果的表视图显示搜索结果。</p>

<p>  当你添加这个搜索控制器，并添加和管理搜索结果时，你需要遵守以下四点:</p>

<ol>
<li>为搜索结果表视图提供数据源(searchResultsDataSource).</li>
<li>为搜索结果表视图提供代理(searchResultsDelegate).响应用户在结果表中的选择。</li>
<li>为搜索控制器提供代理(delegate).响应用户在搜索栏上的输入操作。</li>
<li>为搜索栏(UISearchBar)上提供代理(delegate UISearchBarDelegate), 响应搜索条件的改变。</li>
</ol>


<p>  典型的初始化实例方法如下：</p>

<pre><code>  searchController = [[UISearchDisplayController alloc] initWithSearchBar:searchBar contentsController:self];
  searchController.delegate = self;
  searchController.searchResultsDataSource = self;
  searchController.searchResultsDelegate = self;
</code></pre></li>
</ul>


<p>  <img src="http://doruby.com/assets/UISearchController.jpg" alt="UISearchController" /></p>

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextChecker_Class/Reference/Reference.html">UITextChecker</a></p>

<p>  使用UITextChecker类的实例来检查一个字符串(通常是文档的文本)拼错的单词。</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITextInputStringTokenizer_Class/Reference/Reference.html">UITextInputStringTokenizer</a></p>

<p>  这个类实现了UIKit 框架里的UITextInputTokenizer 协议。实现分词效果.</p>

<p>  PS: 没有用过</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITextPosition_Class/Reference/Reference.html">UITextPosition</a></p>

<p>  这个类表示在一个文本内容的位置。换句话说，它是一个支持字符串在text-displaying视图的索引.</p>

<p>  UITextView 类的实例方法 positionFromPosition:offset: 返回的就是这样的对象</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITextRange_Class/Reference/Reference.html">UITextRange</a></p>

<p>  这个类表示在一个文本内容中的区域。换句话说，它表示从哪儿开始到哪儿结束的索引。</p>

<p>  UITextView 类的实例方法 selectedRange 返回的就是这样的对象 [textView selectedTextRange];</p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITouch_Class/Reference/Reference.html">UITouch</a></p>

<p>  UITouch对象表示手指在屏幕上点击或移动的特定事件.你可以通过UIEvent传递过来的UITouch对象访问到。</p>

<p>  UITouch对象包括访问的方法,和在特定的视图或窗口触摸的位置.它还允许您找到接触发生时,用户是否不止一次点击,是否是滑动.从哪儿开始，哪儿结束等等。</p>

<p>  gestureRecognizers 属性在 iOS 3.2 后被引入.返回的是手势识别器类。</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Art/discrete_vs_continuous_2x.png" alt="Discrete and continuous gestures" /></p></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode自动生成Objective C SDK文档]]></title>
    <link href="http://doruby.com/blog/2013/11/23/objective-c-api-documentation-generator/"/>
    <updated>2013-11-23T14:26:00+08:00</updated>
    <id>http://doruby.com/blog/2013/11/23/objective-c-api-documentation-generator</id>
    <content type="html"><![CDATA[<p>有的时候我们经常需要查看描述项目的API文档，传统的做法是手动写Markdown或Doc文档之类，现在我们可以利用标准的代码注释方法，然后用<a href="http://gentlebytes.com/appledoc/">appledoc</a>工具来自动生成和苹果官方SDK文档类似的HTMl文档。</p>

<h2>配置</h2>

<p>下载源码并编译:</p>

<pre><code>git clone git://github.com/tomaz/appledoc.git 
cd appledoc
</code></pre>

<p>用它自带的脚本编译</p>

<pre><code>sudo sh install-appledoc.sh (如果你需要默认HTML模板可以添加 '-t default'， 默认是存放在 ~/.appledoc下的)
</code></pre>

<p>你也可以自定义 bin 目录, 和模板存放地</p>

<pre><code>mkdir ~/Library/Application\ Support/appledoc (创建Doc存放目录)
sudo sh install-appledoc.sh -b /usr/bin -t ~/Library/Application\ Support/appledoc
</code></pre>

<h2>集成进Xcode5 脚本</h2>

<ol>
<li>在你的Xcode项目中新建Target</li>
<li>选择 Other > Aggregate, 建议取名为Documentation</li>
<li>选择 Documentation > Edit Scheme</li>
<li>选择 Build > Post-actions</li>
<li>点+ > New Run Script Action</li>
<li>Provide build settings from 选择 Documentation</li>
<li>下面粘贴进脚本</li>
</ol>


<p><em>company 等内容修改为你自己的内容</em></p>

<p><em>outputPath 为输出html路径</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#appledoc Xcode script 
</span><span class='line'># Start constants 
</span><span class='line'>company="SQUARE"; 
</span><span class='line'>companyID="com.doruby";
</span><span class='line'>companyURL="http://doruby.com";
</span><span class='line'>target="iphoneos";
</span><span class='line'>#target="macosx";
</span><span class='line'>outputPath="~/help";
</span><span class='line'># End constants
</span><span class='line'>/usr/local/bin/appledoc \
</span><span class='line'>--project-name "${PROJECT_NAME}" \
</span><span class='line'>--project-company "${company}" \
</span><span class='line'>--company-id "${companyID}" \
</span><span class='line'>--docset-atom-filename "${company}.atom" \
</span><span class='line'>--docset-feed-url "${companyURL}/${company}/%DOCSETATOMFILENAME" \
</span><span class='line'>--docset-package-url "${companyURL}/${company}/%DOCSETPACKAGEFILENAME" \
</span><span class='line'>--docset-fallback-url "${companyURL}/${company}" \
</span><span class='line'>--output "${outputPath}" \
</span><span class='line'>--publish-docset \
</span><span class='line'>--docset-platform-family "${target}" \
</span><span class='line'>--logformat xcode \
</span><span class='line'>--keep-intermediate-files \
</span><span class='line'>--no-repeat-first-par \
</span><span class='line'>--no-warn-invalid-crossref \
</span><span class='line'>--exit-threshold 2 \
</span><span class='line'>"${PROJECT_DIR}"</span></code></pre></td></tr></table></div></figure>


<p><img src="http://doruby.com/assets/objectivec_api_documentation.png" alt="objective-c api auto generator config" /></p>

<p>Build 后即可在 <code>~/help</code> 文件夹下看到多出了几个html 文件，那就是完整的项目API文档。</p>

<h1>关于注释的写法</h1>

<!-- more -->


<h1>Appledoc comments formatting style</h1>

<p>Appledoc extracts documentation from specially formatted comments, giving you freedom to choose which comments will be parsed and which not. To make porting old documentation simpler, it allows you to use either doxygen or headerdoc style comments.</p>

<h2>Multiple line comments:</h2>

<p>Appledoc only handles multiple line comments if they start with slash and double star and end with standard star and slash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/** Some comment */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lines may optionally start with whitespace and a single star char and appledoc will ignore the prefix star, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/** Star prefixed comment</span>
</span><span class='line'><span class="cm"> * spreading over multiple </span>
</span><span class='line'><span class="cm"> * lines</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make transition from headerdoc a bit simpler, appledoc also accepts headerdoc style multiline comments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/*! Comment */</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Single line comments:</h2>

<p>appledoc also handles single line comments that start with three slashes. Two or more single line comments in consequtive lines are grouped together into a single comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">/// Single line comment spreading</span>
</span><span class='line'><span class="c1">/// over multiple lines</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Laying out comments</h1>

<p>Appledoc has been designed to keep comments in source code as readable as possible. In order to achieve this, it uses <a href="http://daringfireball.net/projects/markdown/">Markdown</a>-like syntax. Specifically, it uses <a href="http://www.pell.portland.or.us/~orc/Code/discount/">Discount</a> library for processing Markdown, which supports a set of extensions to original Markdown; check the <a href="http://www.pell.portland.or.us/~orc/Code/discount/">link</a> for more details. Furthermore, it extracts as much information from the comment surrounding context which allows you to focus on documenting entities, instead of polluting comments with tagging which class or method a comment belongs to.</p>

<h2>Paragraphs</h2>

<p>Paragraphs are simply any number of consecutive rows of text separated by one or more empty (or tab and space only) lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">First</span> <span class="n">paragraph</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Second</span> <span class="n">paragraph</span> <span class="n">with</span> <span class="n">lot</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">of</span>
</span><span class='line'><span class="n">text</span> <span class="n">spread</span> <span class="n">accross</span> <span class="n">multiple</span> <span class="n">lines</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">And</span> <span class="n">another</span> <span class="n">paragraph</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first paragraph of the comment is automatically used as short description and remaining as long description or discussion. You can change default behavior via command line switches.</p>

<h2>Unordered lists</h2>

<p>Unordered lists use -, + or * markers in front of each item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="nf">First</span> <span class="n">item</span><span class="p">.</span>
</span><span class='line'><span class="o">-</span> <span class="n">Second</span> <span class="n">item</span> <span class="n">with</span> <span class="n">lot</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">of</span> <span class="n">text</span>
</span><span class='line'>  <span class="n">spread</span> <span class="n">across</span> <span class="n">multiple</span> <span class="n">lines</span><span class="p">.</span>
</span><span class='line'><span class="o">-</span> <span class="n">Third</span> <span class="n">item</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The list must be delimited from surrounding paragraphs by empty lines at the top and bottom. You can nest lists by prefixing them with tabs or spaces like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="nf">Item</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">Item</span> <span class="mf">1.1</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">Item</span> <span class="mf">1.2</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">Item</span> <span class="mf">1.2.1</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">Item</span> <span class="mf">1.3</span>
</span><span class='line'><span class="o">-</span> <span class="n">Item</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can combine ordered and unordered lists when nesting.</p>

<h2>Ordered lists</h2>

<p>Ordered lists use a number followed by a dot as a marker in front of each item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mf">1.</span> <span class="n">First</span> <span class="n">item</span>
</span><span class='line'><span class="mf">2.</span> <span class="n">Second</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>Numbers don&#8217;t need to be consequtive, you can even use the same number for all items; appledoc will simply number the items by their order. All rules for unordered lists also apply for ordered lists: separation with empty lines, nesting etc., so it won&#8217;t be repeated here.</p>

<h2>Examples and code blocks</h2>

<p>If you want to mark a block of text as an example, simply prefix each line with a tab or 4 (or more) spaces. Appledoc will automatically convert consequtive blocks of prefixed lines into a single code block. Similar to lists and other paragraph blocks, example section needs to be delimited from preceding and following paragraph with an empty line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Normal</span> <span class="n">paragraph</span> <span class="n">text</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">First</span> <span class="n">line</span> <span class="n">of</span> <span class="n">example</span>
</span><span class='line'>  <span class="n">Second</span> <span class="n">line</span> <span class="n">of</span> <span class="n">example</span>
</span><span class='line'>  
</span><span class='line'><span class="n">Next</span> <span class="n">paragraph</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Important information blocks</h2>

<p>You mark a paragraph as important by prefixing it&#8217;s first line with @warning directive. For example, this is how you can achieve effect Apple uses for these blocks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">warning</span> <span class="o">*</span><span class="nl">Important:</span><span class="o">*</span> <span class="n">Sending</span> <span class="n">this</span> <span class="n">message</span> <span class="n">before</span> <span class="err">`</span><span class="nl">readValues:fromFile:</span><span class="err">`</span> <span class="n">will</span> <span class="n">result</span> <span class="k">in</span> <span class="n">unpredicted</span> <span class="n">results</span><span class="p">,</span> <span class="n">most</span> <span class="n">likely</span> <span class="n">as</span> <span class="n">runtime</span> <span class="n">exception</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Important</em>: All text after <code>@warning</code> directive, up to next <code>"@"</code> directive will become part of the block - currently it&#8217;s not possible to terminate warning block manually and continue with normal paragraphs! This allows you nesting lists and multiple paragraphs, but may come as surprise when not expected. Therefore it&#8217;s recommended to use warning blocks at the end of &#8220;normal&#8221; paragraphs (and as any &#8220;@&#8221; directive will end previous block or paragraph, you can put them above method directives). Something to keep in mind!</p>

<h2>Bug information blocks</h2>

<p>If you&#8217;d like to make a paragraph even more emphasized than a <code>@warning</code>, you can use <code>@bug</code> directive. It works just like <code>@warning</code>, so see description there for details. Not so much used, but may come handy under certain circumstances.</p>

<h1>Formatting text</h1>

<p>Appledoc has been designed to keep comments in source code as readable as possible. In order to achieve this, it uses <a href="http://daringfireball.net/projects/markdown/">Markdown</a>-like syntax. Specifically, it uses <a href="http://www.pell.portland.or.us/~orc/Code/discount/">Discount</a> library for processing Markdown, which supports a set of extensions to original Markdown; check the <a href="http://www.pell.portland.or.us/~orc/Code/discount/">link</a> for more details. Furthermore, it extracts as much information from the comment surrounding context which allows you to focus on documenting entities, instead of polluting comments with tagging which class or method a comment belongs to.</p>

<h2>Emphasis</h2>

<p>Text can be emphasized with the following syntax:</p>

<ul>
<li><p>Text wrapped within stars (*text*) becomes strong: <em>text</em>.</p></li>
<li><p>Text wrapped within underscodes (_text_) becomes emphasized: <em>text</em>.</p></li>
</ul>


<p>You can include the marker itself in the middle of the text, so this *some * text* is converted to: <em>some * text</em>. You can nest strong and emphasized formatting directives, so _*text*_ or *_text_* becomes emphasized strong text like this: <em><em>text</em></em>.</p>

<p>Note: you can also use standard Markdown formatting: **text** or __text__ for <strong>bold</strong> and ***text*** or ___text___ for <strong><em>emphasized strong</em></strong>.</p>

<h2>Code spans</h2>

<p>As you&#8217;re documenting source code, chance is you might want to format text as code. Any text wrapped within backtick quotes (`text`) is converted into <code>code span</code>. Note that you can&#8217;t nest emphasis within code spans!</p>

<h2>Headers and the rest</h2>

<p>Appledoc supports full Markdown, therefore you can include headers, line breaks, block quotes, horizontal rules etc. However, there&#8217;s rarely a need for many of these features and using them may result in odd looking documentation. If you need any of these, go experiment and see if you like results or not.</p>

<h1>Links and cross references</h1>

<p>You can easily link to any other documented entity or URL. Note that there are command line options that change how links are parsed, examples below assume you&#8217;re using default settings.</p>

<h2>Links to web pages and other URLs</h2>

<p>Any valid URL address starting with <code>http://</code>, <code>https://</code>, <code>ftp://</code>, <code>file://</code> or <code>mailto:</code> is automatically converted to a link in generated HTML.</p>

<h2>Links to classes, categories and protocols</h2>

<p>Any word that matches known class, category or protocol name is automatically converted to cross reference link to that object. Assuming complete documentation contains class GBClass, it&#8217;s extension GBClass(), category NSError(GBError) and protocol GBProtocol, the following text will automatically convert text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">This</span> <span class="n">text</span> <span class="n">contains</span> <span class="n">links</span> <span class="nl">to:</span> <span class="n">class</span> <span class="n">GBClass</span><span class="p">,</span> <span class="n">it</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">extension</span> <span class="n">GBClass</span><span class="p">(),</span>
</span><span class='line'><span class="n">category</span> <span class="n">NSError</span><span class="p">(</span><span class="n">GBError</span><span class="p">)</span> <span class="n">and</span> <span class="n">protocol</span> <span class="n">GBProtocol</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>into something like:</p>

<p>This text contains links to: class <a href="http://">GBClass</a>, it&#8217;s extension <a href="http://">GBClass()</a>, category <a href="http://">NSError(GBError)</a> and protocol <a href="http://">GBProtocol</a>.</p>

<h2>Links to local members</h2>

<p>Any word that matches method or property selector name of &#8220;current&#8221; class, category or protocol is automatically converted to cross reference link to that member. Assuming current object contains method runWithValue:afterDelay: and property value, the following text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">This</span> <span class="n">text</span> <span class="n">contains</span> <span class="n">links</span> <span class="nl">to:</span>
</span><span class='line'><span class="n">method</span> <span class="nl">runWithValue:afterDelay:</span> <span class="n">and</span>
</span><span class='line'><span class="n">property</span> <span class="n">value</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>will automatically convert to something like:</p>

<p>This text contains links to: method <a href="http://">runWithValue:afterDelay:</a> and property <a href="http://">value</a>.</p>

<h2>Links to remote members</h2>

<p>Creating cross reference links to members of other classes, categories or protocols requires a bit more effort as you need to state the class and the method, but still follows the same principle. Assuming complete documentation contains class GBClass which has method runWithValue:afterDelay: and property value, the following text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">This</span> <span class="n">text</span> <span class="n">contains</span> <span class="n">links</span> <span class="nl">to:</span>
</span><span class='line'><span class="n">method</span> <span class="p">[</span><span class="n">GBClass</span> <span class="nl">runWithValue:</span><span class="n">afterDelay</span><span class="p">]</span> <span class="n">and</span>
</span><span class='line'><span class="n">property</span> <span class="p">[</span><span class="n">GBClass</span> <span class="n">value</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>will convert to something like:</p>

<p>This text contains links to: method [<a href="http://">GBClass runWithValue:afterDelay:</a>] and property [<a href="http://">GBClass value</a>]</p>

<h2>Custom link descriptions</h2>

<p>As appledoc parses Markdown links for known objects, you can take advantage of link descriptions and even reference-type links to add that fine touch to generated documentation. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">For</span> <span class="n">more</span> <span class="n">info</span> <span class="n">check</span> <span class="p">[</span><span class="n">this</span> <span class="n">page</span><span class="p">](</span><span class="nl">http:</span><span class="c1">//gentlebytes.com), </span>
</span><span class='line'><span class="n">also</span> <span class="n">take</span> <span class="n">a</span> <span class="n">look</span> <span class="n">at</span> <span class="p">[</span><span class="n">this</span> <span class="n">class</span><span class="p">](</span><span class="n">GBClass</span><span class="p">)</span>
</span><span class='line'><span class="n">and</span> <span class="p">[</span><span class="n">this</span> <span class="n">method</span><span class="p">]([</span><span class="n">GBClass</span> <span class="nl">method:</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="n">For</span> <span class="n">referring</span> <span class="n">to</span> <span class="n">common</span> <span class="n">object</span> <span class="n">multiple</span> <span class="n">times</span><span class="p">,</span>
</span><span class='line'><span class="n">use</span> <span class="n">this</span> <span class="p">[</span><span class="n">class</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span> <span class="n">And</span> <span class="p">[</span><span class="n">repeat</span> <span class="n">again</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">GBClass</span>
</span></code></pre></td></tr></table></div></figure>


<p>As long as <code>GBClass</code> and <code>[GBClass method:]</code> are recognized as valid cross references, the above example is converted to something like:</p>

<p>For more info check <a href="http://">this page</a>, also take a look at <a href="http://">this class</a> and <a href="http://">this method</a>.</p>

<p>For referring to common object multiple times, use this <a href="http://">class</a>. And <a href="http://">repeat again</a>.</p>

<h1>Methods and properties description</h1>

<p>For methods and properties you may want to document their parameters, results or exceptions they may raise. To do that, there are a number of &#8220;@&#8221; directives you can use:</p>

<ul>
<li><code>@return &lt;description&gt;</code>: Provides the description of method or property result. Alternatives: <code>@returns</code> or <code>@result</code>.</li>
<li><code>@param &lt;name&gt; &lt;description&gt;</code>: Provides the description of method parameter with the given name. You need to provide description for each parameter or appledoc will log a warning (you can suppress these warnings through command line switch).</li>
<li><code>@exception &lt;name&gt; &lt;description&gt;</code>: Provides the description of an exception that may be raised by a method. The name of the exception is given with the first parameter and description with the second.</li>
</ul>


<p><em>Note</em>: All of the text following the directive, up to the next directive is considered as part of the directive description. This allows you to include multiple paragraphs, unordered or ordered lists, warnings, bugs and the rest, but may come as surprise if not expected! To compensate, it&#8217;s recommended to enter all these directives at the bottom of the comment text. In fact, because of this, all directives are formatted so that you enter the description as the last directive &#8220;parameter&#8221;.</p>

<h1>Various bits and pieces</h1>

<ul>
<li><p><strong>Generating related links</strong>: <code>@see &lt;name&gt;</code> or <code>@sa &lt;name&gt;</code>. Although you can provide cross reference links anywhere within the paragraph text, as described above, you need to use @see directives to provide related context links for documentation sets. The name should follow cross reference guidelines described above.</p>

<p><strong>Note</strong>: Methods and properties keep all cross references in generated HTML, regardless of the referenced object. But when <code>@see</code> is used within class, category or protocol comment, only cross references to template documents are preserved and converted to companion guide links (generated in the table below the title). All other cross references - i.e. to other objects or members - are ignored. Oh, and remember, you can use nice descriptions using Markdown syntax, for example:</p>

<p><code>
@see [String Programming Guide](document1).
</code></p></li>
<li><p><strong>Grouping methods</strong>: <code>@name &lt;title&gt;</code>. All methods and properties declared after @name directive will be stored into a group with the given title. These groups are then extracted as tasks in generated HTML. Important: @name must be specified in it&#8217;s own separate comment preceeding the first group method or property comment for which the task is specified! So this would work:</p>

<p>&#8220;`objc
/<em>* @name Section title </em>/</p>

<p>/<em>* Method description </em>/</p>

<ul>
<li>(void)someMethod;
&#8220;`</li>
</ul>


<p>and this wouldn&#8217;t:</p>

<p>&#8220;`objc
/** @name Section title</p>

<p>Method description */</p>

<ul>
<li>(void)someMethod;
&#8220;`</li>
</ul>
</li>
<li><p><strong>Comment delimiters</strong>: Any comment may optionally include delimiter lines. A delimiter line is any combination of 3 or more chars from the following set: <code>"!@#$%^&amp;*()_=``~,&lt;.&gt;/?;:'\\"-"</code>. Such lines are ignored, so given a comment like this:</p>

<p><code>objc
/// ---------------------------------
/// comment
/// ---------------------------------
</code></p>

<p>will automatically strip first and last line. This is mostly used for making <code>@name</code> sections more stand out.</p></li>
<li><p><strong>Directives prefix</strong>: Although all directives in examples above use &#8220;@&#8221; sign as a prefix, you can actually use any non-whitespace char instead, for example <code>\param</code>, <code>$param</code>, <code>%param</code> and so on&#8230;</p></li>
</ul>


<p>And last, but not least, as appledoc uses standard Markdown rules, take a look at <a href="http://daringfireball.net/projects/markdown/">Markdown documentation</a> and <a href="http://www.pell.portland.or.us/~orc/Code/discount/">Discount library </a>for more details and possibilities. This doc is only meant as a quick guide to general formatting and all appledoc specifics, not as comprehensive documentation of all supported Markdown features. Also take a look at <a href="https://github.com/tomaz/appledoc/">appledoc source code</a> for examples of how it fits together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调试我们的iOS APP]]></title>
    <link href="http://doruby.com/blog/2013/10/18/how-to-debug-our-app/"/>
    <updated>2013-10-18T16:58:00+08:00</updated>
    <id>http://doruby.com/blog/2013/10/18/how-to-debug-our-app</id>
    <content type="html"><![CDATA[<p>很早就想写一篇关于调试和测试的文章了。一直没写的原因一方面是工作太忙，一方面是现在新的调试工具和调试方法层出不穷，不知道什么时候现在用的方法就会过时，所以一直犹豫是不是等到有一个系统的方案出来在总结一下，不过我觉得还是现在先把能想到和用到写下来，让大家一起探讨。</p>

<p><strong>注：以下部分英文原文因本人翻译水平有限，不能给出准确的中文释义，所以将引用的原文进行了保留。</strong></p>

<p>关于如何来调试我们的APP，其实是可以从不同的维度来划分，比如应用调试，测试，错误分析等。我们先从最基本的调试工具入手一步步介绍。</p>

<h2>XCode Debug Tools</h2>

<ul>
<li><p><strong>Debugger</strong></p>

<p>首先 Xcode 默认设置了你所用的 Debugger</p>

<p><img src="http://doruby.com/assets/setting_debugger.png" alt="Debugger Setting" /></p>

<p>通常我们这里用默认的<a href="http://lldb.llvm.org/">LLDB</a>,   XCode5之后默认就是用 LLDB了，XCode5以前还有 GDB。</p>

<p>使用LLDB之后，我们通常是在代码执行的地方，打上断点，如：</p>

<p><img src="http://doruby.com/assets/set_breakpoint.png" alt="Set BreakPoint" /></p>

<p>这样程序运行遇到断点后会停下等待，这时我们可以在控制台，使用一些调试命令输出我们所需要的对象信息:</p>

<p><img src="http://doruby.com/assets/control_po.png" alt="Control NSLog" /></p>

<p>  还有很多命令:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="n">recursiveDescription</span><span class="p">]</span>  <span class="err">#</span> <span class="err">递归打印</span><span class="n">view</span>
</span><span class='line'><span class="n">image</span> <span class="n">lookup</span> <span class="o">--</span><span class="n">address</span> <span class="mh">0xffffff</span>
</span></code></pre></td></tr></table></div></figure>


<p>  更多调试命令可以参考上面的 LLDB 介绍，或用 help 命令显示帮助。</p>

<blockquote><p>需要注意的是当Optimization Level不为None时，断点的定位会有差异，所以建议在Target 为 Debug 时调试更为准确，如果一定要在Release模式下调试，可以手动设置为Optimization Level 为 None</p></blockquote>

<p>  如果想看全部的信息，可以点这里选择:</p>

<p>  <img src="http://doruby.com/assets/all_variables.png" alt="ALL Variables" /></p>

<hr />

<ul>
<li><p><strong>Global Symbolic BreakPoints</strong></p>

<p>除了上面的指定断点设置，还可以设置Global Point, 作用域在当前用户的所有project，添加的Breakpoint 的方式有好几种，而且还可以以不同的方式呈现，比如日志输入，语音提醒等，可以在Action参数中设置。</p>

<p>BreakPoint 其中有几种设定类型，其中有：</p>

<ol>
<li><p>Symbolic Breakpoint</p>

<p> 我们可以添加指定的方法为断点。比如添加一个 viewDidLoad Symbol，会在运行到所有的viewDidLoad方法时停下. 如果你要添加某个特定类的实例方法，可以用 -[类名 实例方法名]。类方法是 +[类名 方法名]</p>

<p> <img src="http://doruby.com/assets/symbolic_breakpoint.png" alt="Symbolic Breakpoint" /></p>

<ul>
<li>如果你不知道这个方法格式应该如何书写，可以在你想要打断点的方法里先做断点，然后查看左边的Show the Debugger Navigator, 里的 Thread 指向的方法名:</li>
</ul>


<p> <img src="http://doruby.com/assets/show_the_debugger_navigator.png" alt="Show The Debugger Navigator" /></p>

<p> 看到 0 后面的方法调用了吗？</p></li>
<li><p>Exception Breakpoint</p>

<p> 另一个非常有用的断点设定,</p>

<p> 在开发中除了用断点调试我们的应用分析问题外，还有一种情况是，我们向被释放的对象发送了消息，导致的crash (EXC_BAD_ACCESS)。</p>

<p> 关于Zombie:</p>

<blockquote><p>在 Cocoa 中，zombies 是一种即使生命终止了也会到惹麻烦的对象。我们可以做的是启动一个编译设置，使对象的引用计数降为0的时候不被释放，而是将它们转化为NSZombie对象。这个类的目的是记录任何对它的实例的调用，因为这意味着代码企图用一个已经消亡的对象调用方法。</p></blockquote>

<p> 通常我们的做法是通过设定 Exception Breakpoint 来统一排错，其中也包括了些类情况, 所以这个断点设定的方法来检查类似情况变得非常实用。</p>

<p> <img src="http://doruby.com/assets/exception_breakpoint_menu.png" alt="Exception Breakpoint Menu" /></p>

<p> 如果添加这个类型的 Breakpoint , 好多隐藏很深的 Bug 都会被发现, 类似于 @try {} @catch {} 的 catch 部分</p>

<p> <img src="http://doruby.com/assets/exceptions_breakpoint.png" alt="Exceptions Breakpoint" /></p>

<ul>
<li><p>如果使用GDB和更早版本的XCode的用户可以用下面的方式来检查：</p>

<p>编辑Scheme, 将Diagnostics中的 Enable Zombie Objects 与 Malloc Stack 勾选上</p>

<p>并选中 Enable Zombie Objects 与 Malloc Stack：</p>

<p>当程序出现类似的问题而crash时，我们就可以找到被释放地址的真正原因</p>

<p><img src="http://doruby.com/assets/enable_zombie_objects.png" alt="Enable Zombie Objects" /></p></li>
</ul>
</li>
</ol>
</li>
</ul>


<hr />

<ul>
<li><p><strong>通过 Instrument 调试应用</strong></p>

<p>XCode 另外还自带了一个非常强大的APP调试工具： Instrument</p>

<p>关于 Instrument 的介绍，大家可以参考：
<a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html">Instrument Introduction</a></p>

<p><img src="http://doruby.com/assets/Instruments_intro_ss.png" alt="Instruments intro" /></p>

<p><em>如果你在Schema Profile 中可以直接设置 Instrument 指定的分析工具，这样运行 Profile 时就可以直接启动它了</em></p>

<p>Instrument 包括的小工具有好几种，我们这里先介绍几个:</p>

<ol>
<li><p>Leaks</p>

<p> 内存泄露分析工具 Leaks：</p>

<p> <img src="http://doruby.com/assets/Instruments_leaks.png" alt="Instruments leaks" /></p>

<p> <a href="http://www.mobileorchard.com/find-iphone-memory-leaks-a-leaks-tool-tutorial/">Leak Tutorial</a></p></li>
<li><p>Zombiles</p>

<p> 和上面检查Zombile方式类似</p></li>
</ol>
</li>
</ul>


<hr />

<ul>
<li><p>Analyze 分析代码</p>

<p>  试一试通过选择 Menu => Product => Analyze。检测出可能会出现内存泄露的地方，重复引用，命名冲突等地方</p></li>
</ul>


<hr />

<ul>
<li><p><strong>自定义警告和错误提示</strong></p>

<p>我们还可以在代码中加入自定义的警告和错误提示，对于需要特别给某段代码加标注供日后处理时或出错判断时，可以在代码的上方加上</p>

<p><code>#warning [message]</code>
在编译的时候会出现警告</p>

<p><code>#error [message]</code>
在编译的时候会给出现错误提示</p></li>
</ul>


<h2>Crash</h2>

<p>由于使用Objective－c 和 c ，直接执行二进制指令，自己管理内存，会出现访问错误内存的情况出现。这时，系统会直接把你的进程干掉，iOS会给你生成一个Crash Log</p>

<ul>
<li><strong>关于crash时，如果显示的是堆栈信息，如何正确定位到程序部分</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">***</span> <span class="n">First</span> <span class="n">throw</span> <span class="n">call</span> <span class="nl">stack:</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="mh">0x2f3a022</span> <span class="mh">0x30cbcd6</span> <span class="mh">0x2ee2a48</span> <span class="mh">0x2ee29b9</span> <span class="mh">0x2f392da</span> <span class="mh">0x9cfd3</span> <span class="mh">0x7f460</span> <span class="mh">0x80a6e</span> <span class="mh">0x103ba29</span> <span class="mh">0x2f05855</span> <span class="mh">0x2f05778</span> <span class="p">...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>  如何查看这些信息背后的真实情况，在main.m代码中加入以写部分：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">  #ifdef DEBUGvoid eHandler(NSException*);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">eHandler</span><span class="p">(</span><span class="n">NSException</span><span class="o">*</span><span class="n">exception</span><span class="p">){</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,[</span><span class="n">exception</span> <span class="n">callStackSymbols</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">  #endif</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span><span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
</span><span class='line'><span class="cp">    #ifdef DEBUG    </span>
</span><span class='line'>    <span class="n">NSSetUncaughtExceptionHandler</span><span class="p">(</span><span class="o">&amp;</span><span class="n">eHandler</span><span class="p">);</span>
</span><span class='line'><span class="cp">    #endif</span>
</span><span class='line'>    <span class="p">...</span><span class="n">rest</span> <span class="n">of</span> <span class="n">your</span> <span class="n">main</span> <span class="n">function</span> <span class="n">here</span><span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<ul>
<li><p><strong>理解与分析 Crash Report</strong></p>

<p>在APP上线后，对 Crash Report 的监控是最为重要的环节了。itunes connect应用管理后台提供了部分的 Crash Reports，你可以在管理后台下载 .crash 文件，然后通过这个文件查找是哪儿引起的crash。</p>

<p>但是这个文件中没有平时调试时候那样可以看到的函数名和函数具体调用行数。因为这里的这些信息都被转换成了16进制的地址，起到了一定的加密作用，别人拿到你的crash日志也不知道哪里崩溃了，需要利用你编译app的时候生成的dSYM文件然后将这些信息反转为可读模式。所以保留好你Archive后的dSYM文件是很有用的！</p>

<p>如果你能找到 dSYM 文件，就可以利用symbolicatecrash工具查找具体的Bug发生地点了。</p>

<p><code>symbolicatecrash [CrashLog file] [dSYM file]</code></p>

<p><em>tips</em></p>

<blockquote><p>查找 symbolicatecrash 文件位置
find /Applications/Xcode.app -name symbolicatecrash</p></blockquote>

<ul>
<li><p>设定 <code>export DEVELOPER_DIR=/Application/Xcode.app/Contents/Developer/</code></p></li>
<li><p>查看你的应用 uuid 与 dSYM的 uuid 是否能对应:</p></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dwarfdump</span> <span class="o">--</span><span class="n">uuid</span> <span class="n">yourapp</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">yourapp</span>
</span><span class='line'><span class="n">dwarfdump</span> <span class="o">--</span><span class="n">uuid</span> <span class="n">yourapp</span><span class="p">.</span><span class="n">app</span><span class="p">.</span><span class="n">dSYM</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>搜索含有正确 uuid 的文件
<code>mdfind "com_apple_xcode_dsym_uuids == 5255A87A-B23C-3AE8-B367-14B49C21C1D6"</code></li>
</ul>


<h2>分析</h2>

<!-- more -->


<p>日志主要由几部分组成，其中:</p>

<ul>
<li><p><strong>Exception Type</strong></p>

<ul>
<li><p>EXC_BAD_ACCESS (SIGSEGV)</p>

<p>这个类型的Exception的意思是，你没有权限访问你所要访问的内存。一般都是由于访问了已经被release的object导致的，或者把一个object release了两次。甚至当你访问超出数组长度的内容时，也有可能出现这种类型的错误。它的意思应该是段错误。这个SIGSEGV不是objective－c的excption，而是更底层的C部分的信号。</p></li>
<li><p>EXC_CRASH (SIGKILL)或者(SIGABRT)</p>

<p>这个类型的Exception比较特别，你需要认真查看后面所有Thread的BackTrace才能找到最终原因，因为有时候它所写的Crash Thread并不是真正引起崩溃的原因，在其中你也找不到什么有用的信息。(SIGABRT)一般是由于系统捕获到一个异常，然后把你的应用终结掉了，你可以在下面的栈信息中寻找有abort信息的那一个thread，能找到真正的原因。(SIGKILL)目前还没在自己的App中遇到过。</p></li>
</ul>
</li>
<li><p><strong>Exception codes</strong></p>

<p>In the crash log is a line that starts with the text Exception Codes: followed by one or more hexadecimal values. These are processor-specific codes that may give you more information on the nature of the crash.</p>

<ol>
<li><p>The exception code <strong>0xbaaaaaad</strong> indicates that the log is a stackshot of the entire system, not a crash report. To take a stackshot, push the home button and any volume button. Often these logs are accidentally created by users, and do not indicate an error.</p></li>
<li><p>The exception code <strong>0xbad22222</strong> indicates that a VoIP application has been terminated by iOS because it resumed too frequently.</p></li>
<li><p>The exception code <strong>0x8badf00d</strong> indicates that an application has been terminated by iOS because a watchdog timeout occurred. The application took too long to launch, terminate, or respond to system events. One common cause of this is doing synchronous networking on the main thread. Whatever operation is on Thread 0: needs to be moved to a background thread, or processed differently, so that it does not block the main thread.</p></li>
<li><p>The exception code <strong>0xc00010ff</strong> indicates the app was killed by the operating system in response to a thermal event. This may be due to an issue with the particular device that this crash occurred on, or the environment it was operated in. For tips on making your app run more efficiently, see iOS Performance and Power Optimization with InstrumentsWWDC session.</p></li>
<li><p>The exception code <strong>0xdead10cc</strong> indicates that an application has been terminated by iOS because it held on to a system resource (like the address book database) while running in the background.</p></li>
<li><p>The exception code <strong>0xdeadfa11</strong> indicated that an application has been force quit by the user. Force quits occur when the user first holds down the On/Off button until &#8220;slide to power off&#8221; appears, then holds down the Home button. It&#8217;s reasonable to assume that the user has done this because the application has become unresponsive, but it&#8217;s not guaranteed - force quit will work on any application.</p></li>
</ol>
</li>
<li><p><strong>一个单步分析 Crash Report 的方法</strong></p>

<p>Steps to analyze crash report from apple:</p>

<p>Copy the release .app file which was pushed to the appstore, the .dSYM file that was created at the time of release and the crash report receive from APPLE into a FOLDER.</p>

<p>OPEN terminal application and go to the folder created above (using CD command)</p>

<p>  <code>atos -arch armv7 -o YOURAPP.app/YOURAPP MEMORY_LOCATION_OF_CRASH.</code> The memory location should be the one at which the app crashed as per the report.</p>

<p>Ex: <code>atos -arch armv7 -o 'app name.app'/'app name' 0x0003b508</code></p>

<p>This would show you the exact line, method name which resulted in crash.</p>

<p>Ex: [classname functionName:]; -510</p>

<p>Symbolicating IPA</p>

<p>if we use IPA for symbolicating - just rename the extention .ipa with .zip , extract it then we can get a Payload Folder which contain app. In this case we don&#8217;t need .dSYM file.</p>

<p>或用 dwarfdump 命令也行</p>

<p>  <code>dwarfdump –lookup 0x000036d2 –arch armv7 YOURAPP.app.dSYM</code></p>

<p>  参考文章:</p></li>
<li><p><a href="https://developer.apple.com/library/ios/technotes/tn2151/_index.html">Understanding and Analyzing iOS Application Crash Reports</a></p></li>
<li><a href="http://www.whoslab.me/blog/?p=608">理解Crash Log</a></li>
<li><p><a href="http://stackoverflow.com/questions/1282428/whats-the-difference-between-kern-invalid-address-and-kern-protection-failure">KERN_INVALID_ADDRESS 与 KERN_PROTECTION_FAILURE 的区别</a></p>

<p>  一些第三方分析工具:</p></li>
<li><p><a href="http://www.umeng.com/">UMeng 日志监控</a></p></li>
<li><a href="http://www.hopperapp.com/">反汇编工具Hopper分析Crash Log</a></li>
<li><a href="http://blog.devtang.com/blog/2013/07/24/use-crashlytics/">Crashlytics</a></li>
</ul>


<h2>几种 Debug 输出方法</h2>

<p>在Apple Tech Note TN2239：<a href="http://developer.apple.com/library/ios/#technotes/tn2010/tn2239.html">iOS Debugging Magic</a> 中提到了程序开发中Debug output 方法：</p>

<pre><code>NSLog
stderr
system log
</code></pre>

<p>调试信息的输出主要有方式，一是通过输出到终端输出，二是输出到日志系统。下面讲介绍一下这几种输出调试信息的方式，首先从stderr说起。</p>

<ul>
<li><p>stderr （引用自TN2239）：</p>

<p>Many programs, and indeed many system frameworks, print debugging messages to stderr. The destination for this output is ultimately controlled by the program: it can redirect stderr to whatever destination it chooses. However, in most cases a program does not redirect stderr, so the output goes to the default destination inherited by the program from its launch environment. This is typically one of the following:</p>

<p>If you launch a GUI application as it would be launched by a normal user, the system redirects any messages printed on stderr to the system log. You    can view these messages using the techniques described earlier.
If you run a program from within Xcode, you can see its stderr output in Xcode’s debugger Console window (choose the Console menu item from the Run menu to see this window).</p>

<p>Attaching to a running program (using Xcode’s Attach to Process menu, or the attach command in GDB) does not automatically connect the program’s stderr to your GDB window. You can do this from within GDB using the trick described in the “Seeing stdout and stderr After Attaching” section of Technical Note TN2030, ‘GDB for MacsBug Veterans’.</p>

<p>这样一段代码在真机上运行：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;This is message from NSLog&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;This is message from stderr</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>  如果是通过Xcode调试加载运行这个程序，那么</p>

<p>  在xcode的console中打印如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="mi">2011</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">12</span> <span class="mi">18</span><span class="o">:</span><span class="mi">52</span><span class="o">:</span><span class="mf">26.948</span> <span class="n">Test86</span><span class="p">[</span><span class="mi">7891</span><span class="o">:</span><span class="mi">307</span><span class="p">]</span> <span class="n">This</span> <span class="n">is</span> <span class="n">message</span> <span class="n">from</span> <span class="n">NSLog</span><span class="err">```</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">This</span> <span class="n">is</span> <span class="n">message</span> <span class="n">from</span> <span class="n">stderr</span>
</span></code></pre></td></tr></table></div></figure>


<p>  在iPhone的system log中（通过Organizer的console查看）只打印</p>

<pre><code>Sat Mar 12 18:52:26 unknown Test86[7891] &lt;Warning&gt;: This is message from NSLog
</code></pre>

<p>  但是如果在iPhone上通过手指触摸启动这个程序，在iPhone的system log中会打印：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">Sat</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">18</span><span class="o">:</span><span class="mi">53</span><span class="o">:</span><span class="mi">38</span> <span class="n">unknown</span> <span class="n">Test86</span><span class="p">[</span><span class="mi">7900</span><span class="p">]</span> <span class="o">&lt;</span><span class="n">Warning</span><span class="o">&gt;:</span> <span class="n">This</span> <span class="n">is</span> <span class="n">message</span> <span class="n">from</span> <span class="n">NSLog</span>
</span><span class='line'>  <span class="n">Sat</span> <span class="n">Mar</span> <span class="mi">12</span> <span class="mi">18</span><span class="o">:</span><span class="mi">53</span><span class="o">:</span><span class="mi">38</span> <span class="n">unknown</span> <span class="nl">UIKitApplication:</span><span class="n">com</span><span class="p">.</span><span class="n">yourcompany</span><span class="p">.</span><span class="n">Test86</span><span class="p">[</span><span class="mh">0x7d60</span><span class="p">][</span><span class="mi">7900</span><span class="p">]</span> <span class="o">&lt;</span><span class="n">Notice</span><span class="o">&gt;:</span> <span class="n">This</span> <span class="n">is</span> <span class="n">message</span> <span class="n">from</span> <span class="n">stderr</span>
</span></code></pre></td></tr></table></div></figure>


<p>  说明确实stderr在user 自己launch的app中被重定向为system log，而且log的等级为Notice；NSLog的等级为Warning。</p>

<ul>
<li><p>system log</p>

<p>其实system log是unix系统都有采用syslog协议的一个日志系统（RFC详细讲解了这种协议http://tools.ietf.org/html/rfc5424）。每条日志是有等级的，主要分为如下等级：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Level</span> <span class="mi">0</span> <span class="err">–</span> <span class="err">“</span><span class="n">Emergency</span><span class="err">”</span>
</span><span class='line'><span class="n">Level</span> <span class="mi">1</span> <span class="err">–</span> <span class="err">“</span><span class="n">Alert</span><span class="err">”</span>
</span><span class='line'><span class="n">Level</span> <span class="mi">2</span> <span class="err">–</span> <span class="err">“</span><span class="n">Critical</span><span class="err">”</span>
</span><span class='line'><span class="n">Level</span> <span class="mi">3</span> <span class="err">–</span> <span class="err">“</span><span class="n">Error</span><span class="err">”</span>
</span><span class='line'><span class="n">Level</span> <span class="mi">4</span> <span class="err">–</span> <span class="err">“</span><span class="n">Warning</span><span class="err">”</span>
</span><span class='line'><span class="n">Level</span> <span class="mi">5</span> <span class="err">–</span> <span class="err">“</span><span class="n">Notice</span><span class="err">”</span>
</span><span class='line'><span class="n">Level</span> <span class="mi">6</span> <span class="err">–</span> <span class="err">“</span><span class="n">Info</span><span class="err">”</span>
</span><span class='line'><span class="n">Level</span> <span class="mi">7</span> <span class="err">–</span> <span class="err">“</span><span class="n">Debug</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<p>  在创建好日志之后，通过调用API发送日志信息给一个叫做syslogd的守护进程，然后syslogd根据自己的配置文件（位于/private/etc/syslog.conf, mac系统的在：/etc/asl.conf )</p>

<p>  在mac os和ios那么怎样调用API将日志发送给系统日志呢？有两种API：</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/#documentation/System/Conceptual/ManPages_iPhoneOS/man3/syslog.3.html#//apple_ref/doc/man/3/syslog">syslog API</a> - <em>不要和之前syslog协议混淆</em></li>
<li><a href="https://developer.apple.com/library/ios/#documentation/System/Conceptual/ManPages_iPhoneOS/man3/asl.3.html">ASL: Apple System Log facility</a> - <em>是苹果自己实现的一种可以同syslogd服务器交互，用来替换syslog API的实现</em></li>
</ul>


<p>这里还有一些讲Syslog不错的文章：</p>

<ul>
<li><a href="http://www.cocoanetics.com/2011/03/accessing-the-ios-system-log/">Accesing the iOS system log</a></li>
<li><a href="http://boredzo.org/blog/archives/2008-01-20/why-asl">Why ASL?</a></li>
</ul>


<hr />

<ul>
<li><a href="http://corner.squareup.com/2012/08/ponydebugger-remote-debugging.html">PonyDebugger: Remote Debugging Tools for Native iOS Apps</a> - <em>远程调试</em></li>
<li>Charles, Mitmproxy(免费) - <em>使用网络代理调试API Request</em></li>
</ul>


<h4>查看iOS 设备上的APP数据</h4>

<p><img src="http://doruby.com/assets/iOS_device_data.png" alt="iOS Device Data" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 上的蓝牙框架 - Core Bluetooth for iOS [译]]]></title>
    <link href="http://doruby.com/blog/2013/08/15/core-bluetooth-for-ios/"/>
    <updated>2013-08-15T09:52:00+08:00</updated>
    <id>http://doruby.com/blog/2013/08/15/core-bluetooth-for-ios</id>
    <content type="html"><![CDATA[<p>所须环境: iOS 6 以上</p>

<p>原文: <a href="http://weblog.invasivecode.com/post/39707371281/core-bluetooth-for-ios-6-core-bluetooth-was">Core Bluetooth for iOS 6</a></p>

<p>Core Bluetooth 是在iOS5首次引入的，它允许iOS设备可以使用健康，运动，安全，自动化，娱乐，附近等外设数据。在iOS 6 中，这个API被扩展了，让iOS也能成为数据提供方，也就是<code>Server(Peripheral)</code>端，可能使它与其它 iOS 设备交互数据。</p>

<p>Core Bluetooth API 基于BLE4.0规范。这个框架涵盖了BLE标准的所有细节. 不过，仅仅只有新的iOS设备和MAC是兼容BLE标准的: iPhone 4S, iPhone5, Mac Mini, New iPad, MacBook Air, MacBook Pro. 并且 iOS 6 iPhone 模拟器也支持一样的标准.这对你在没有真机时，开发APP时是非常实用的。</p>

<h2>相关的类</h2>

<p>在CoreBluetooth框架中，有两个主要的角色：外设和中心（Peripheral and Central） ，整个框架都是围绕这两个主要角色设计的，它们之间有一系列的回调交换数据。
下图1展示了外设和中心（<code>Peripheral and Central</code>）的关系。</p>

<p><img src="http://doruby.com/assets/core_bluetooth_client_server_naming.png" alt="Fig1" /></p>

<p>外设创建或提供一些数据，中心使用这些设备提供的数据。在iOS6之后，iOS 设备也可以即是外设，也可以是中心，但不能在同时间扮演两个角色。</p>

<p>这两个组件在CoreBluetooth框架中是分别用两个类来表示的，中央是<code>CBCentralManager</code>类，外设是<code>CBPeripheralManager</code>类。</p>

<p>在中心，一个 <code>CBPeripheral</code> 对象表示正在连接中的外设,同样在外设里，一个 <code>CBCentral</code> 表示正在连接中的中心.</p>

<p>你可以理解外设是一个广播数据的设备，它开始告诉外面的世界说它这儿有一些数据，并且能提供一些服务。另一边中心开始扫描外面有没有
自己所需要的服务，如果发现后，会和外设做连接请求，一旦连接确定后，两个设备就可以传输数据了。</p>

<p>除了中心与外设，我们还得考虑他们用于交互的数据结构，这些数据在Services(服务)中被结构化,每个服务由不同的Characteristics(特性)所组成。特性定义为一种属性类型，并且对应一个逻辑值(比如0x2A49)。</p>

<p>你可以在<a href="http://developer.bluetooth.org">developer bluetooth</a>这里找到标准服务与特性的列表。</p>

<p>比如：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#Services:</span>
</span><span class='line'>
</span><span class='line'><span class="nl">SpecificationName:</span> <span class="n">Blood</span> <span class="n">Pressure</span>
</span><span class='line'><span class="nl">SpecificationType:</span> <span class="n">org</span><span class="p">.</span><span class="n">bluetooth</span><span class="p">.</span><span class="n">service</span><span class="p">.</span><span class="n">blood_pressure</span>
</span><span class='line'><span class="nl">AssignedNumber:</span> <span class="mh">0x1810</span>
</span><span class='line'><span class="nl">SpecificationLevel:</span> <span class="n">Adopted</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#Characteristics:</span>
</span><span class='line'>
</span><span class='line'><span class="nl">SpecificationName:</span> <span class="n">Blood</span> <span class="n">Pressure</span> <span class="n">Feature</span>
</span><span class='line'><span class="nl">SpecificationType:</span> <span class="n">org</span><span class="p">.</span><span class="n">bluetooth</span><span class="p">.</span><span class="n">characteristic</span><span class="p">.</span><span class="n">blood_pressure_feature</span>
</span><span class='line'><span class="nl">AssignedNumber:</span> <span class="mh">0x2A49</span>
</span><span class='line'><span class="nl">SpecificationLevel:</span> <span class="n">Adopted</span>
</span></code></pre></td></tr></table></div></figure>


<p>在中心里，服务由 <code>CBService</code> 类表示，每个服务由代表特性的 <code>CBCharacteristic</code>类所构成。</p>

<p>同样，在外设中服务与特性由 <code>CBMutableService</code> 与 <code>CBMutableCharacteristicclass</code> 类表示。</p>

<p>下图解释了他们之间的关系:</p>

<p><img src="http://doruby.com/assets/objects_involved_in_core_bluetooth.png" alt="Fig2" /></p>

<p><code>CBUUID</code> 和 <code>CBATTRequest</code> 是两个苹果提供给我们的帮助类，以便于开发者更简单地操作数据，稍后你将看到如何使用它们。</p>

<h2>使用</h2>

<p>不幸的是，Apple提供的文档目前还不完整，你只有通过WWDC上两个关于 Core Bluetooth的视频和头文件，去理解这个框架是如何工作的。不过，因为我之前已经做过相关方面的事情，我决定和你分享这些内容，我希望下面的教程可以帮助到你。你也可以通过 http://training.invasivecode.com 查看我们的培训课程.</p>

<h4>创建外设 (Peripheral)</h4>

<p>为了可以创建一个完整的例子，你需要两台iOS设备，我将向你展示如何通过蓝牙连接这两个设备，并交换数据。记住先检查一下你的设备是不是被BLE所支持的。</p>

<p>开始创建一个外设需要下面几步：</p>

<p>1.创建并且开始Peripheral Manager</p>

<p>2.设置并且发布它的服务。</p>

<p>3.广播这个服务。</p>

<p>4.和中心连接。</p>

<p>用Single-View Application模板创建一个新的Xcode工程。命名为BlueServer （使用ARC）。工程创建完成后，添加CoreBluetooth.framework 框架。然后打开ViewController.h文件，并且添加以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;CoreBluetooth/CoreBluetooth.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使view controller 遵循 <code>CBPeripheralManagerDelegate</code> 协议，然后添加这个属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CBPeripheralManager</span> <span class="o">*</span><span class="n">manager</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在ViewController.m中，添加以下代码到viewDidLoad方法中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBPeripheralManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate:</span><span class="n">self</span> <span class="nl">queue:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码初始化了一个 Peripheral Manager (计划中的第一项). 第一个参数是设置delegate(这里的例子就是view controller)。第二参数(队列)设置为了nil,因为Peripheral Manager 将运行在主线程中。如果你想用同步的线程做更复杂的事情，你需要单独创建一个队列并把它放在这个参数中。</p>

<p>一旦Peripheral Manager被初始化后，我们需要及时检查正在运行的App设备状态，是不是符合BLE标准的。所以你要实现下面的这个代理方法（如果设备不支持BLE,你可以友好地提醒用户。你还可以通过拿到的状态值做更多事情）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheralManagerDidUpdateState:</span><span class="p">(</span><span class="n">CBPeripheralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">peripheral</span><span class="p">.</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CBPeripheralManagerStatePoweredOn:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="n">setupService</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Peripheral Manager did change state&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里，我检查了外设的状态，如果它的状态是<code>CBPeripheralManagerStatePoweredOn</code>，那这个设备是支持BLE并可以继续执行。</p>

<p>外设的状态包括有下面这些</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">CBPeripheralManagerStateUnknown</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CBPeripheralManagerStateResetting</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CBPeripheralManagerStateUnsupported</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CBPeripheralManagerStateUnauthorized</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CBPeripheralManagerStatePoweredOff</span><span class="p">,</span>
</span><span class='line'>   <span class="n">CBPeripheralManagerStatePoweredOn</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="n">CBPeripheralManagerState</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>服务与特性 (Service &amp; Characteristic)</h2>

<p>setupService 是一个辅助方法，我们让它去准备服务和特性，对于这个例子，我们仅仅需要一个服务和一个特性。</p>

<p>每一个服务和特性必要有一个UUID来标识，UUID是一个16位或128位的值。如果你创建的是一个 client-server(中央-外设)应用，那么你需要创建属于你自己的128位UUID，你必须确保它不能和其他已经存在的服务冲突，如果你要创建一个新的设备，你需要去符合标准委员会的UUID。</p>

<p>如果你创建的是你自己的client-server(正如我们现在做的)，我建议你在Terminal下用 uuidgen 命令创建128位的UUID. 所以打开 Terminal并创建两个（一个为服务，一个为特性）.之后，你需要将他们添加到中心和外设应用。这里我们先添加下面几行在 view controller中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kServiceUUID</span> <span class="o">=</span> <span class="s">@&quot;6BC6543C-2398-4E4A-AF28-E4E0BF58D6BC&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kCharacteristicUUID</span> <span class="o">=</span> <span class="s">@&quot;9D69C18C-186C-45EA-A7DA-6ED7500E9C97&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：这里的UUID每个人生成的都不一样，最好是你自己生成</p>

<p>这里是 setupService 的实现方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupService</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Creates the characteristic UUID</span>
</span><span class='line'>    <span class="n">CBUUID</span> <span class="o">*</span><span class="n">characteristicUUID</span> <span class="o">=</span> <span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kCharacteristicUUID</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Creates the characteristic</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">customCharacteristic</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBMutableCharacteristic</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithType:</span><span class="n">characteristicUUID</span> <span class="nl">properties:</span><span class="n">CBCharacteristicPropertyNotify</span> <span class="nl">value:</span><span class="nb">nil</span> <span class="nl">permissions:</span><span class="n">CBAttributePermissionsReadable</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Creates the service UUID</span>
</span><span class='line'>    <span class="n">CBUUID</span> <span class="o">*</span><span class="n">serviceUUID</span> <span class="o">=</span> <span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kServiceUUID</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Creates the service and adds the characteristic to it</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">customService</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBMutableService</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithType:</span><span class="n">serviceUUID</span> <span class="nl">primary:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Sets the characteristics for this service</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">customService</span> <span class="nl">setCharacteristics:</span><span class="err">@</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">customCharacteristic</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Publishes the service</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">peripheralManager</span> <span class="nl">addService:</span><span class="n">self</span><span class="p">.</span><span class="n">customService</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，我使用<code>+UUIDWithString:</code>方法创建了一个 UUID 对象，之后我用这个 UUID对象创建了特性。注意，我在初始化时，第三个参数传的是nil (那个value)，之所以这样做，是因为我告诉 Core Bluetooth我将稍候添加这个特性值，当你需要动态创建数据时，经常这么做。如果你已经有一个静态的值，你可以直接传它。</p>

<p>在这个方法中，第一个参数是先创建好的UUID,第二个参数(那个 properties)确定你将如何使用这个特性值，下面是这些可能的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">CBCharacteristicPropertyBroadcast:</span> <span class="err">允许一个广播特性值</span><span class="p">,</span><span class="err">用于描述特性配置，不允许本地特性</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyRead:</span> <span class="err">允许读一个特性值</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyWriteWithoutResponse:</span> <span class="err">允许写一个特性值，没有反馈</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyWrite:</span> <span class="err">允许写一个特性值</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyNotify:</span> <span class="err">允许通知一个特性值，没有反馈</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyIndicate:</span> <span class="err">允许标识一个特性值</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyAuthenticatedSignedWrites:</span> <span class="err">允许签名一个可写的特性值</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyExtendedProperties:</span> <span class="err">如果设置后，附加特性属性为一个扩展的属性说明，不允许本地特性</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyNotifyEncryptionRequired:</span> <span class="err">如果设置后，仅允许信任的设备可以打开通知特性值</span>
</span><span class='line'><span class="nl">CBCharacteristicPropertyIndicateEncryptionRequired:</span> <span class="err">如果设置后，仅允许信任的设备可以打开标识特性值</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一个参数是属性的读、写、加密权限，有以下几种：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CBAttributePermissionsReadable</span>
</span><span class='line'><span class="n">CBAttributePermissionsWriteable</span>
</span><span class='line'><span class="n">CBAttributePermissionsReadEncryptionRequired</span>
</span><span class='line'><span class="n">CBAttributePermissionsWriteEncryptionRequired</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建特性后，我同样通过<code>+UUIDWithString:</code>方法创建 UUID，然后通过它创建了服务。 最后我为服务设置对应的这个特性。记住，每个服务可以包括多个特性，正如下面的图3</p>

<p><img src="http://doruby.com/assets/services_and_characteristics.png" alt="Fig3" /></p>

<p>所以我们需要通过一个特性数组来添加到服务中，在这个例子里，这个数组对象只有一个特性。</p>

<p>最后一行的代码是将服务添加到 Peripheral Manager中，用于发布这个服务。一旦这样做之后，Peripheral Manager 将会通知它的 delegate调用<code>peripheralManager:didAddService:error:</code>方法。这里如果没有错误，你可以开始广播这个服务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheralManager:</span><span class="p">(</span><span class="n">CBPeripheralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didAddService:</span><span class="p">(</span><span class="n">CBService</span> <span class="o">*</span><span class="p">)</span><span class="nv">service</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Starts advertising the service</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">peripheralManager</span> <span class="nl">startAdvertising:</span><span class="err">@</span><span class="p">{</span> <span class="n">CBAdvertisementDataLocalNameKey</span> <span class="o">:</span> <span class="s">@&quot;ICServer&quot;</span><span class="p">,</span> <span class="n">CBAdvertisementDataServiceUUIDsKey</span> <span class="o">:</span> <span class="err">@</span><span class="p">[[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kServiceUUID</span><span class="p">]]</span> <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当Peripheral Manager开始广播这个服务时，delegate 会接收到 <code>peripheralManagerDidStartAdvertising:error:</code> 消息。当中心订阅
了这个服务时，它的delegate会收到 <code>peripheralManager:central:didSubscribeToCharacteristic:</code>消息，这儿你可以生成动态数据给中心。</p>

<p>现在，发送数据给中心你需要预先写一些数据的代码，然后发送<code>updateValue:forCharacteristic:onSubscribedCentrals:</code>到外设。</p>

<h2>创建一个中心 (Central)</h2>

<p>现在，我们已经有了一个外设，让我们创建中心(client)。记住，中心是用来处理外设提供的数据的。如上面的图2所示，这里的中心被 <code>CBCentralManager</code> 对象表示。</p>

<p>让我们创建一个名字为 BlueClient 的 Xcode 项目，使用ARC,并添加 CoreBluetooth.framework ，在 view controller 头添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;CoreBluetooth/CoreBluetooth.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在中心，你必须遵循两个协议: CBCentralManagerDelegate 和 CBPeripheralDelegate</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span> <span class="o">&lt;</span><span class="n">CBCentralManagerDelegate</span><span class="p">,</span> <span class="n">CBPeripheralDelegate</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>并添加两个属性:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CBCentralManager</span> <span class="o">*</span><span class="n">manager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableData</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在正如我们之前为外设创建的做法一样，我们创建中心对象:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBCentralManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate:</span><span class="n">self</span> <span class="nl">queue:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，这里的第一个参数表示 CBCentralManager delegate (这里是 view controller). 第二个参数和之前一样也表示调度队列，如果设置为空，他会使用主队列。</p>

<p>一旦 Central Manager 初始化后，我们同样也要检查它的状态，是不是被 BLE 所支持的APP，实现下面的delegate 方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManagerDidUpdateState:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">central</span><span class="p">.</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">CBCentralManagerStatePoweredOn:</span>
</span><span class='line'>            <span class="c1">// Scans for any peripheral</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="nl">scanForPeripheralsWithServices:</span><span class="err">@</span><span class="p">[</span> <span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kServiceUUID</span><span class="p">]</span> <span class="p">]</span> <span class="nl">options:</span><span class="err">@</span><span class="p">{</span><span class="n">CBCentralManagerScanOptionAllowDuplicatesKey</span> <span class="o">:</span> <span class="err">@</span><span class="n">YES</span> <span class="p">}];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Central Manager did change state&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个<code>scanForPeripheralsWithServices:options:</code> 方法用于告诉 Central Manager 开始查看特别的服务，如果你第一个参数用的是nil，这个Central Manager 开始查看所有服务。</p>

<p>这个 kServiceUUID 和创建外设中的 ServiceUUID 一样。所以我们再次添加下面2行代码在你的实现类中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kServiceUUID</span> <span class="o">=</span> <span class="s">@&quot;6BC6543C-2398-4E4A-AF28-E4E0BF58D6BC&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kCharacteristicUUID</span> <span class="o">=</span> <span class="s">@&quot;9D69C18C-186C-45EA-A7DA-6ED7500E9C97&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦一个外设在扫描时被发现后，中心 delegate 会收到下面的回调：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didDiscoverPeripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">advertisementData:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">advertisementData</span> <span class="nf">RSSI:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">RSSI</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个调用通知Central Manager delegate（在这个例子中就是view controller），一个附带着广播数据和信号质量(RSSI-Received Signal Strength Indicator)的周边被发现。这是一个很酷的参数，知道了信号质量，你可以用它去估计中心与外设的距离。</p>

<p>任何广播或扫描的响应数据保存在advertisementData 中，可以通过CBAdvertisementData key来访问它。现在，你可以停止扫描，去连接外设了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didDiscoverPeripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">advertisementData:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">advertisementData</span> <span class="nf">RSSI:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">RSSI</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Stops scanning for peripheral</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="n">stopScan</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">peripheral</span> <span class="o">!=</span> <span class="n">peripheral</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">peripheral</span> <span class="o">=</span> <span class="n">peripheral</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Connecting to peripheral %@&quot;</span><span class="p">,</span> <span class="n">peripheral</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Connects to the discovered peripheral</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="nl">connectPeripheral:</span><span class="n">peripheral</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>options 参数是一个可选的字典(NSDictionary)，如果需要，可以用以下的键(keys), 它们的值始终是一个boolean。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">CBConnectPeripheralOptionNotifyOnConnectionKey:</span> <span class="err">这是一个</span><span class="n">NSNumber</span><span class="p">(</span><span class="n">Boolean</span><span class="p">)</span><span class="err">，表示系统会为获得的外设显示一个提示，当成功连接后这个应用被挂起，这对于没有运行在中心后台模式并不显示他们自己的提示时是有用的。如果有更多的外设连接后都会发送通知，如果附近的外设运行在前台则会收到这个提示。</span>
</span><span class='line'><span class="nl">CBConnectPeripheralOptionNotifyOnDisconnectionKey:</span>  <span class="err">这是一个</span><span class="n">NSNumber</span><span class="p">(</span><span class="n">Boolean</span><span class="p">),</span> <span class="err">表示系统会为获得的外设显示一个关闭提示，如果这个时候关闭了连接，这个应用会挂起。</span>
</span><span class='line'><span class="nl">CBConnectPeripheralOptionNotifyOnNotificationKey:</span> <span class="err">这是一个</span><span class="n">NSNumber</span><span class="p">(</span><span class="n">Boolean</span><span class="p">)</span><span class="err">，表示系统会为获得的外设收到通知后显示一个提示，这个时候应用是被挂起的。</span>
</span></code></pre></td></tr></table></div></figure>


<p>基于连接的结果，delegate会接收</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="nf">centralManager:didFailToConnectPeripheral:error:</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="nf">centralManager:didConnectPeripheral:</span>
</span></code></pre></td></tr></table></div></figure>


<p>中的一个。如果成功了，你可以询问正在广播服务的那个外设。因此，在didConnectPeripheral 回调中，你可以写以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">centralManager:</span><span class="p">(</span><span class="n">CBCentralManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">central</span> <span class="nf">didConnectPeripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Clears the data that we may already have</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="nl">setLength:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Sets the peripheral delegate</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">peripheral</span> <span class="nl">setDelegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Asks the peripheral to discover the service</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">peripheral</span> <span class="nl">discoverServices:</span><span class="err">@</span><span class="p">[</span> <span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kServiceUUID</span><span class="p">]</span> <span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，外设开始用一串回调通知它的delegate。在上面一个方法中，我请求外设去寻找服务，外设代理收到 -peripheral:didDiscoverServices:
如果没有错误，外设可以去查找服务所提供特性，你可以这样做。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">aPeripheral</span> <span class="nf">didDiscoverServices:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error discovering service: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">cleanup</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">CBService</span> <span class="o">*</span><span class="n">service</span> <span class="k">in</span> <span class="n">aPeripheral</span><span class="p">.</span><span class="n">services</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Service found with UUID: %@&quot;</span><span class="p">,</span> <span class="n">service</span><span class="p">.</span><span class="n">UUID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Discovers the characteristics for a given service</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">service</span><span class="p">.</span><span class="n">UUID</span> <span class="nl">isEqual:</span><span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kServiceUUID</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">peripheral</span> <span class="nl">discoverCharacteristics:</span><span class="err">@</span><span class="p">[[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kCharacteristicUUID</span><span class="p">]]</span> <span class="nl">forService:</span><span class="n">service</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，如果一个特性被发现，外设delegate 又会接收</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">peripheral:didDiscoverCharacteristicsForService:error:</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didDiscoverCharacteristicsForService:</span><span class="p">(</span><span class="n">CBService</span> <span class="o">*</span><span class="p">)</span><span class="nv">service</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error discovering characteristic: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">cleanup</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">service</span><span class="p">.</span><span class="n">UUID</span> <span class="nl">isEqual:</span><span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kServiceUUID</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">CBCharacteristic</span> <span class="o">*</span><span class="n">characteristic</span> <span class="k">in</span> <span class="n">service</span><span class="p">.</span><span class="n">characteristics</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span> <span class="nl">isEqual:</span><span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kCharacteristicUUID</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">peripheral</span> <span class="nl">setNotifyValue:</span><span class="n">YES</span> <span class="nl">forCharacteristic:</span><span class="n">characteristic</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦特征的值用<code>setNotifyValue:forCharacteristic:</code> 更新后，外设就会通知它的delegate。</p>

<p>外设的 delegate 就会接收到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">peripheral:didUpdateNotificationStateForCharacteristic:error:</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，你可以用 <code>readValueForCharacteristic:</code> 读到新的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">peripheral:</span><span class="p">(</span><span class="n">CBPeripheral</span> <span class="o">*</span><span class="p">)</span><span class="nv">peripheral</span> <span class="nf">didUpdateNotificationStateForCharacteristic:</span><span class="p">(</span><span class="n">CBCharacteristic</span> <span class="o">*</span><span class="p">)</span><span class="nv">characteristic</span> <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error changing notification state: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Exits if it&#39;s not the transfer characteristic</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">characteristic</span><span class="p">.</span><span class="n">UUID</span> <span class="nl">isEqual:</span><span class="p">[</span><span class="n">CBUUID</span> <span class="nl">UUIDWithString:</span><span class="n">kCharacteristicUUID</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Notification has started</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">characteristic</span><span class="p">.</span><span class="n">isNotifying</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Notification began on %@&quot;</span><span class="p">,</span> <span class="n">characteristic</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">peripheral</span> <span class="nl">readValueForCharacteristic:</span><span class="n">characteristic</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// Notification has stopped</span>
</span><span class='line'>        <span class="c1">// so disconnect from the peripheral</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Notification stopped on %@.  Disconnecting&quot;</span><span class="p">,</span> <span class="n">characteristic</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="nl">cancelPeripheralConnection:</span><span class="n">self</span><span class="p">.</span><span class="n">peripheral</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当外设发送新的值时，外设的 delegate 会收到 <code>peripheral:didUpdateValueForCharacteristic:error:</code>，这个方法的第二个参数包含特性，你可以用 <code>-value</code> 属性来读它，这是一个包含了特性值的NSData。</p>

<p>这个时候，你可以为其它数据断开或等待。</p>

<h2>总结</h2>

<p>我为你展示了如何使用 Core Bluetooth 框架的基本示例，我希望通过这个教程，加上WWDC视频，有用的一些文档能帮助你创建一个 BLE 项目，同时你也可以去参考一些文档示例，那你会发现我这教程中所有的 delegate 方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[无线分发应用--通过Safari安装App]]></title>
    <link href="http://doruby.com/blog/2013/05/21/wireless-app-distribution/"/>
    <updated>2013-05-21T16:03:00+08:00</updated>
    <id>http://doruby.com/blog/2013/05/21/wireless-app-distribution</id>
    <content type="html"><![CDATA[<p>iOS 支持以无线方式安装企业级应用程序，这可让您在不使用 iTunes 的情况下将内部软件分发给用户。</p>

<h2>简单几步：</h2>

<ol>
<li><p>用户需要将设备的<a href="http://www.innerfence.com/howto/find-iphone-unique-device-identifier-udid">UDID</a>加到 Apple Developer Center 中心的设备里，并更新 .mobileprovision文件</p></li>
<li><p>Scheme 里将 Archive 的 Build Configuration 换成 Debug 模式</p></li>
<li><p>Archive 后从 Organizer 找到app文件，生成 ipa 文件</p></li>
<li><p>生成 plist 文件，将它与 ipa 文件放到服务器上，并可通过网址访问并可下载</p></li>
<li><p>做一个网页供大家访问后点键接跳转下载此plist, 如果生成将网址生成一个二维码，就更方便了。</p>

<p>比如:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;itms-services://?action=download-manifest&amp;url=http://example.com/manifest.plist&quot;</span><span class="o">&gt;</span><span class="n">Install</span> <span class="n">App</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>plist 文件模板:</h2>

<!-- more -->


<ul>
<li>注: {}里的内容是要替换的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&quot;UTF-8&quot;</span><span class="o">?&gt;</span>
</span><span class='line'><span class="o">&lt;!</span><span class="n">DOCTYPE</span> <span class="n">plist</span> <span class="n">PUBLIC</span> <span class="s">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="s">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">plist</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;1.0&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">items</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">assets</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">kind</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">software</span><span class="o">-</span><span class="n">package</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">url</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">{</span><span class="err">你的域名</span><span class="nl">http:</span><span class="c1">//doruby.com/xxx.ipa}&lt;/string&gt;</span>
</span><span class='line'>              <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">metadata</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">bundle</span><span class="o">-</span><span class="n">identifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">{</span><span class="err">你的</span><span class="n">bundle</span> <span class="n">identifier</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">bundle</span><span class="o">-</span><span class="n">version</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mf">1.0</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">kind</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">software</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="n">title</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">{</span><span class="n">App</span><span class="err">名称</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">array</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">plist</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>网页模板</h2>

<ul>
<li>注: {}里的内容是要替换的</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;!</span><span class="n">DOCTYPE</span> <span class="n">html</span> <span class="n">PUBLIC</span> <span class="s">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="s">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span> <span class="n">xmlns</span><span class="o">=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">meta</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s">&quot;Content-Type&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">meta</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;viewport&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;width=320, height=460, user-scalable=no,</span>
</span><span class='line'><span class="n">initial</span><span class="o">-</span><span class="n">scale</span><span class="o">=</span><span class="mf">1.0</span><span class="s">&quot; /&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="n">Install</span> <span class="n">Dev</span> <span class="n">App</span><span class="o">&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">align</span><span class="o">=</span><span class="s">&quot;center&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;itms-services://?action=download-manifest&amp;url={http://doruby.com/xxx.plist}&quot;</span>  <span class="n">style</span><span class="o">=</span><span class="s">&quot;color:orange; font-size:24px&quot;</span><span class="o">&gt;</span><span class="n">Install</span> <span class="n">the</span> <span class="n">App</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意:</h2>

<p>可能需要配置你的 Web 服务器以便正确地传输清单文件和应用程序文件。</p>

<ul>
<li>对于 OS X Server，将以下 MIME 类型添加到 Web 服务的“MIME Types”（MIME 类型）设置中：</li>
</ul>


<p>application/octet-stream ipa</p>

<p>text/xml plist</p>

<ul>
<li>对于 IIS，使用 IIS Manager 在服务器的“属性”页面中添加 MIME 类型：</li>
</ul>


<p>.ipa application/octet-stream</p>

<p>.plist text/xml</p>

<h2>参考:</h2>

<p><a href="http://help.apple.com/iosdeployment-apps/mac/1.1/#app43ad871e">wireless enterprise app distribution</a></p>

<p><a href="http://thirteendaysaweek.com/2012/10/01/enterprise-deployment-of-ios-apps-with-monotouch/">enterprise deployment of ios apps</a></p>

<p>example:</p>

<p><a href="http://www.doruby.com/assets/food.html">my app</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARC 与内存管理]]></title>
    <link href="http://doruby.com/blog/2013/04/24/arc-with-memory-management/"/>
    <updated>2013-04-24T13:15:00+08:00</updated>
    <id>http://doruby.com/blog/2013/04/24/arc-with-memory-management</id>
    <content type="html"><![CDATA[<p>ARC: Automatic Reference Counting (自动引用计数)</p>

<p>ARC 是 iOS 5 后推出的一项为Objective - C程序在编译时提供自动内存管理的功能。ARC可以让你把注意力集中在你感兴趣的代码，减少开发中的内存管理步骤，简化开发。</p>

<p>它通过指定的语法，让编译器(LLVM 3.0)在编译代码时，自动生成实例的引用计数管理部分代码。有一点，ARC并不是GC，它只是一种代码静态分析（Static Analyzer）工具。</p>

<p>在过往我们通常使用的是MRC: Manual Reference Counting(手动内存管理)。这些规则将逐渐变为本能，你会发现少一个release的代码怎么看怎么别扭，从而减少或者杜绝内存管理的错误。可以说MRC的规则非常简单，但是同时也非常容易出错。往往很小的错误就将引起crash或者leak之类问题。</p>

<p>很多人担心内存管理不受自己控制，其实这是对于ARC机制了解不足从而不自信，所导致的对新事物的恐惧。</p>

<p>下面我们从几个方面来详细介绍ARC到底如何实现，如何使用，它的好处，注意事项等。</p>

<h2>需要的基本环境:</h2>

<p>ARC is supported in Xcode 4.2 for OS X v10.6 and v10.7 (64-bit applications) and for iOS 4 and iOS 5. Weak references are not supported in OS X v10.6 and iOS 4.</p>

<p><strong>注意：iOS4 不支持 weak 引用</strong></p>

<h2>原理</h2>

<!-- more -->


<p><img src="http://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Art/ARC_Illustration.jpg" alt="ARC Illustration" /></p>

<pre><code>ARC的一个基本原则: 只要某个对象被任一strong指针引用，那么它将不会被销毁。当对象没有被任何strong指针引用时，那么就将被销毁。
</code></pre>

<h2>默认行为</h2>

<p>对象默认为声明为 strong 类型, ARC 确保对象在函数体内是不会被 dealloc。比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">takeLastNameFrom:</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span><span class="p">)</span><span class="nv">person</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">oldLastname</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">lastName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setLastName:</span><span class="p">[</span><span class="n">person</span> <span class="n">lastName</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Lastname changed from %@ to %@&quot;</span><span class="p">,</span> <span class="n">oldLastname</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">lastName</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>强制规则</h2>

<ul>
<li><p>你不能再调用 dealloc 或者实现、调用 retain, release, retainCount, autorelease, 同样@selector(retain), @selector(release)也是不允许的，
当然你可以实现 dealloc 方法，来管理你的实例变量，或者你会调用 [systemClassInstance setDelegate:nil]等.定制的 dealloc 方法不需要写 [super dealloc],这个动作会默认调用。</p>

<p>你仍然可以用 CFRetain, CFRelease 和相关Core Foundation方法。 如果要管理这类对象可以参考：(Managing Toll-Free Bridging 管理自由桥接)</p></li>
<li><p>你不能使用 NSAllocateObject 或 NSDeallocateObject</p>

<p>创建对象用 alloc</p></li>
<li><p>你不能在 C 结构体中使用对象指针</p>

<p>因此下面代码是不可用的</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">selectedImage</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">disabledImage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">ButtonImages</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  建议是用 OC类来管理它们</p>

<ul>
<li><p>不能随意在 id 与 void * 之间随意转换</p>

<p>编译器同样是无法管理 void * 这类 Core Foundation类型的东东，都要用 Managing Toll-Free Bridging 进行生命同期的管理。</p></li>
<li><p>你不能再使用 NSAutoreleasePool 对象</p>

<p>ARC 提供了性能更好的 @autoreleasepool block 替换原来这类使用方式。</p></li>
<li><p>你不能使用内存区</p>

<p>你不需要再使用 NSZone 等这类对象，因为现在Objective-C运行时已经忽略NSZone了，所以没必要再使用NSZone了。</p></li>
<li><p>你不能使用 new 开头的属性名，但你可以手动指定 getter 方法名</p>

<p>例如:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 非法:</span>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">newTitle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OK:</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">getter</span><span class="o">=</span><span class="n">theNewTitle</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">newTitle</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>ARC 新的对象生命周期声明</h1>

<ul>
<li>属性</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 用 strong 代替 retain, @property(retain) MyClass *myObject;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">strong</span><span class="p">)</span> <span class="n">MyClass</span> <span class="o">*</span><span class="n">myObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 用 weak 代替 assign &quot;@property(assign) MyClass *myObject;&quot;</span>
</span><span class='line'><span class="c1">// 实例变量被释放后，会自动赋予 nil 指针，省得我们自己在手动赋nil操作。</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">weak</span><span class="p">)</span> <span class="n">MyClass</span> <span class="o">*</span><span class="n">myObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 ARC 中 strong 将是默认的类型.</p>

<ul>
<li>变量</li>
</ul>


<p>变量同样有以下几种管理生命周期的声明</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__strong</span>
</span><span class='line'><span class="n">__weak</span>
</span><span class='line'><span class="n">__unsafe_unretained</span>
</span><span class='line'><span class="n">__autoreleasing</span>
</span></code></pre></td></tr></table></div></figure>


<p>__unsafe_unretained 类似原来的 assign</p>

<p>所以你可以这样声明这些对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MyClass</span> <span class="o">*</span> <span class="n">__weak</span> <span class="n">myWeakReference</span><span class="p">;</span>
</span><span class='line'><span class="n">MyClass</span> <span class="o">*</span> <span class="n">__unsafe_unretained</span> <span class="n">myUnsafeReference</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是 __weak 变量在栈中的情况，例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">__weak</span> <span class="n">string</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;First Name: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">firstName</span><span class="p">]];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;string: %@&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽管 string 被实例化，但由于 string 声明为 weak 类型，它没有 strong 这个引用，所以他在赋值后立即就被释放了,在Log它时，它已经被释放了。</p>

<h2>同样你也要注意对象值传递. 比如下面的代码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">OK</span> <span class="o">=</span> <span class="p">[</span><span class="n">myObject</span> <span class="nl">performOperationWithError:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Report the error.</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上这个代码是这样隐示声明的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span> <span class="n">__strong</span> <span class="n">e</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而函数是这样被声明了的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">performOperationWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span> <span class="n">__autoreleasing</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以最后编译的结果就是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSError</span> <span class="o">*</span> <span class="n">__strong</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="n">NSError</span> <span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">OK</span> <span class="o">=</span> <span class="p">[</span><span class="n">myObject</span> <span class="nl">performOperationWithError:</span><span class="o">&amp;</span><span class="n">tmp</span><span class="p">];</span>
</span><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Report the error.</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>当本地变量声明(<strong>strong *error)和函数的参数((NSError * </strong>autoreleasing <em>)error)不匹配的时候，编译器会创建一个临时变量。当你获得一个<strong>strong变量的地址时，你可以初始化一个id </strong>strong </em>的指针来声明 ，这样你就可以获得指针的原型，或者你可以声明一个变量为 __autoreleasing。</p>

<h1>避免循环引用</h1>

<p>你可以使用生命周期修饰符来避免Strong引用周期。例如，当你制作了一组父子结构的对象，而且父类要引用子类，则会出现Strong引用周期；反之，当 你将一个父类指向子类为strong引用，子类指向父类为weak引用，就可以避免出现Strong引用周期。当对象包含block objects时，这样的情况会变的更加隐性。</p>

<p>在手动内存管理模式下， <code>__block id x</code>; x不会被 retaining
在ARC模式下，<code>__block id x</code> , 默认被retaining</p>

<p>为了使手动内存管理模式代码可以在ARC模式下正常工作， 你可以用 <code>__unsafe_unretained</code> 来修饰 <code>__block id</code> x;。就和&#8221;<strong>unsafe_unretained&#8221;字面上的意思一样, 不过,这样一个non-retained变量是危险的(因为它会变成一个野指 针) 会带来不良后果。有两种更好一点的方法来处理，一是使用</strong>weak (当你不需要支持iOS 4或OS X v10.6), 二是设__block值为nil，结束他的生命周期。</p>

<ul>
<li>这是MRC时代处理 __block 里对象释放问题:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MyViewController</span> <span class="o">*</span><span class="n">myController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="err">…</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">myController</span><span class="p">.</span><span class="n">completionHandler</span> <span class="o">=</span>  <span class="o">^</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">myController</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">myController</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">myController</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以使用 __block修饰符然后设置myController的值为nil 替代上面的方式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MyViewController</span> <span class="o">*</span> <span class="n">__block</span> <span class="n">myController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="err">…</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">myController</span><span class="p">.</span><span class="n">completionHandler</span> <span class="o">=</span>  <span class="o">^</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">myController</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">myController</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>无伦哪种形式，你都可以使用一个 weak 引用对象避免循环引用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MyViewController</span> <span class="o">*</span><span class="n">myController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="err">…</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">MyViewController</span> <span class="o">*</span> <span class="n">__weak</span> <span class="n">weakMyViewController</span> <span class="o">=</span> <span class="n">myController</span><span class="p">;</span>
</span><span class='line'><span class="n">myController</span><span class="p">.</span><span class="n">completionHandler</span> <span class="o">=</span>  <span class="o">^</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakMyViewController</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在某个时候这个对象，如果放在异步执行时，对象可能已经被释放，所以需要一个 strong 的对象把它 hold 住。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MyViewController</span> <span class="o">*</span><span class="n">myController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="err">…</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">MyViewController</span> <span class="o">*</span> <span class="n">__weak</span> <span class="n">weakMyController</span> <span class="o">=</span> <span class="n">myController</span><span class="p">;</span>
</span><span class='line'><span class="n">myController</span><span class="p">.</span><span class="n">completionHandler</span> <span class="o">=</span>  <span class="o">^</span><span class="p">(</span><span class="n">NSInteger</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MyViewController</span> <span class="o">*</span><span class="n">strongMyController</span> <span class="o">=</span> <span class="n">weakMyController</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strongMyController</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="p">[</span><span class="n">strongMyController</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Probably nothing...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>栈里的变量初始化即为 nil</h2>

<p>使用ARC后， strong, weak, autoreleasing 栈里的变量默认初始为nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">myMethod</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span> <span class="c1">// 这里 name 已经被赋予了nil指针， 所以下面的代码不会出错。</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;name: %@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>修改编译的Flag 打开和关闭 ARC</h2>

<p>如果有遇到第三方插件，或有一些文件你不想用 ARC 来控制，可以在 Build Phases > Compile Sources > 某个文件上 > Compiler Flags: -fno-objc-arc</p>

<p>相互如果想在部分文件中用到 arc 则标记上: -fobjc-arc</p>

<p><img src="http://doruby.com/assets/compiler_flags_arc.png" alt="Compiler flags for arc" /></p>

<h2>Managing Toll-Free Bridging</h2>

<p>由于ARC不能管理Core Foundation Object的生命周期，所以在Core Foundation和ARC之间，我们需要使用到<strong>bridge,</strong>bridge_retained和__bridge_transfer三个转换关键字。</p>

<p>__bridge只做类型转换，但是不修改对象（内存）管理权；</p>

<p>__bridge_retained（也可以使用CFBridgingRetain）将Objective-C的对象转换为Core Foundation的对象，同时将对象（内存）的管理权交给我们，后续需要使用CFRelease或者相关方法来释放对象；</p>

<p>__bridge_transfer（也可以使用CFBridgingRelease）将Core Foundation的对象转换为Objective-C的对象，同时将对象（内存）的管理权交给ARC。</p>

<h2>使用weak property声明Outlet</h2>

<p>在被ARC处理过的iOS和OS X中，声明的outlets将会趋于统一。</p>

<p>一般来说outlets变量被修饰为weak，但是如果outlets变量的所有者是nib文件中的top-level对象(或者是storyboard scene)时，应被修饰为strong。</p>

<p>详细参考Resource Programming Guide中的“Nib Files”。</p>

<p>当我们使用 Interface Builder 生成Outlet对象的时候，一般都是作为 subview 来使用的。比如 UIViewController 的view。所以说Outlet的持有者就是superview对象，即有“父子”关系。我们知道，当对象间有“父子”关系时，需要使用弱参照，以避免“循环参照”。</p>

<p>ViewController 本身是不会作为Outlet的所有者的，所以使用weak property声明。</p>

<p><img src="http://doruby.com/assets/arc_outlet_weak_property.png" alt="arc outlet weak property" /></p>

<p>简化viewDidUnload</p>

<p>Outlet都使用weak property声明的时候，还有一个好处，就是简化viewDidUnload的处理。</p>

<p>iOS在系统内存不足的时候，UIViewController会将没有表示的所有view做unload处理，即调用viewDidUnload接口。</p>

<p>所以，如果是强参照的情况下，需要释放所有权，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">viewDidUnload</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">label</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// 取消强参照，释放所有权</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidUnload</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果没有 self.label = nil 的处理，那么 UIViewController 将不会释放 label 的所有权；结果，系统是调用了unload，但是subview对象始终留在内存中。随着界面上控件的增多，内存泄露会越来越大。</p>

<p>如果使用的是weak property声明的话，会是怎样的呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时，系统在unload时，由于label没有被强参照，更加ARC的规则，这时，label的对象即被释放。并在释放的同时，变量自动指向nil。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidUnload</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 这里什么也不用管</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidUnload</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，如果我们的viewDidUnload只是用来释放Outlet用的话，那么该函数也可以不被重载的。</p>

<p>什么时候要用strong property</p>

<p>由上我们也可以看到，并不是所有的Outlet都用weak来声明都是正确的；当使用Interface Builder生成的第一层的view或者windows被作为Outlet来使用的话，那么不是不能声明为weak property的。（比如，Storyboard的各个scene）</p>

<h1>转化原MRC项目到ARC</h1>

<ul>
<li><p>用Xcode自带工具转换MRC项目到ARC:
Edit > Refactor > Convert to Objective-C ARC)</p>

<p><img src="http://doruby.com/assets/tool_for_convert_to_oc_arc.png" alt="Provides a tool that convert to ARC" /></p>

<p>在这个选项下，还有一个 Convert to Modern Objective-C Syntax.. 转化成更现代的写法, 有兴趣的可以试试。:)</p>

<p>在转化的过程中，编译器会先对代码进行检查，如果遇到错误警告，可以根据提示进行处理后，再进行转化 (如果你要无视这些错误可以在Preferences 里设定 Continue building after errors)</p></li>
<li><p>将项目用ARC方式编译
Build Settings -> LLVM compiler 将 Objective-C Automatic Reference Counting 设置为 Yes</p>

<p><img src="http://doruby.com/assets/convert_to_arc_in_llvm.png" alt="Convert to ARC in LLVM" /></p></li>
</ul>


<h1>常见问题</h1>

<ul>
<li><p>通常遇到的错误有这样一些：</p>

<p><code>Receiver type ‘X’ for instance message is a forward declaration</code></p>

<p>这往往是引用的问题。ARC要求完整的前向引用，也就是说在MRC时代可能只需要在.h中申明@class就可以，但是在ARC中如果调用某个子类中未覆盖的父类中的方法的话，必须对父类.h引用，否则无法编译。</p>

<p><code>Switch case is in protected scope</code></p>

<p>现在switch语句必须加上{}了，ARC需要知道局部变量的作用域，加上{}后switch语法更加严格，否则遇到没有break的分支的话内存管理会出现问题。</p>

<p><code>A name is referenced outside the NSAutoreleasePool scope that it was declared in</code></p>

<p>这是由于写了自己的 autoreleasepool，而在转换时在原来的pool中申明的变量在新的@autoreleasepool中作用域将被局限。解决方法是把变量申明拿到pool的申请之前。</p>

<p><code>ARC forbids Objective-C objects in structs or unions</code></p></li>
<li><p>ARC 需要你指定 super init 的结果到 self
 [super init]; // 这将是无效的</p>

<p> 推荐用</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>   <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>实例变量会变成 strong 类型</p>

<p>在用 ARC 之前, thing 这个变量是一个 weak 类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">Superclass</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">thing</span><span class="p">;</span> <span class="c1">// Weak reference.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyClass</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">thing</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">thing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setThing:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">newThing</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span> <span class="o">=</span> <span class="n">newThing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 ARC 后，thing 变量实际上是默认用了 strong 类型，所以如果你要想继续使用 weak 类型，必须显示声明</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">Superclass</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">__weak</span> <span class="n">thing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">MyClass</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">thing</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">thing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setThing:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">newThing</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span> <span class="o">=</span> <span class="n">newThing</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">Superclass</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">)</span> <span class="kt">id</span> <span class="n">thing</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">thing</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>首先，我们需要转变一下观念, 对于在.h中申明的实例变量：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MainViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSOperationQueue</span> <span class="o">*</span><span class="n">queue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们不妨仔细考虑一下，为什么在interface里出现了实例变量的申明？通常来说，实例变量只是在类的实例中被使用，而你所写的类的使用者并没有太多必要了解你的类中有哪些实例变量。而对于绝大部分的实例变量，应该都是protected或者private的，对它们的操作只应该用setter和getter，而这正是property所要做的工作。可以说，将实例变量写在头文件中是一种遗留的陋习。更好的写实例变量名字的地方应当与类实现关系更为密切，为了隐藏细节，我们应该考虑将它们写在@implementation里。好消息是，在LLVM3.0中，不论是否开启ARC，编译器是支持将实例变量写到实现文件中的。甚至如果没有特殊需要又用了property，我们都不应该写无意义的实例变量申明，因为在@synthesize中进行绑定时，我们就可以设置变量名字了，这样写的话可以让代码更加简洁。</p>

<p>在这里我们对实例变量申明移到.m里中。修改后的.h是这样的，十分简洁</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">MainViewController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSOperationQueue</span> <span class="o">*</span><span class="n">queue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的写法让代码相当灵活，而且不得不承认.m确实是这些实例变量的应该在的地方</p>

<p>参考资料:</p>

<ul>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">About Memory Management</a></li>
</ul>


<p><img src="http://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Art/memory_management_2x.png" alt="memory managment" /></p>

<ul>
<li><p><a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">Transitioning to ARC</a></p></li>
<li><p><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#blocks">Objective-C Automatic Reference Counting</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模块化设计-iOS团队协作开发 v1.0]]></title>
    <link href="http://doruby.com/blog/2013/04/12/block-based-design/"/>
    <updated>2013-04-12T09:28:00+08:00</updated>
    <id>http://doruby.com/blog/2013/04/12/block-based-design</id>
    <content type="html"><![CDATA[<h2>现状</h2>

<p>当项目发展到一定阶段，功能会变得越来越庞大，修改一个功能可能有牵一发而动全身的感觉，维护变的相当吃力。如果只是扩充项目成员的话，协作也会成为一种障碍，人多反而不能提高生产率。 如果只是一、两个成员开发的项目还好说，之间的沟通与协作更加灵活而松散，也许吼一嗓子就可以完成。 但如果人员也从几个到十几个，甚至几十个。就不能再靠传统流程开发了，需要更深入系统架构层面将大家工作进行规范与限定，制定标准。</p>

<p>这个时候我们就需要更好的架构设计应用，使得开发与协作变得更加高效，功能的耦合性变得更小。在设计领域有一种概念是模块化设计(Block-based design).  按此概念的意思是说 &#8220;对一定范围内的不同功能或相同功能不同性能、不同规格的产品进行功能分析的基础上，划分并设计出一系列功能模块，通过模块的选择和组合构成不同的顾客定制的产品，以满足市场的不同需求&#8221;。ok, 这正是我们想要的结果.</p>

<p>模块化设计也是绿色设计方法之一,所谓绿色设计是指&#8221;在产品整个生命周期内，着重考虑产品环境属性（可拆卸性，可回收性、可维护性、可重复利用性等）并将其作为设计目标，在满足环境目标要求的同时，保证产品应有的功能、使用寿命、质量等要求&#8221;.绿色设计的原则被公认为“3R”的原则，即Reduce,Reuse,Recycle，减少环境污染、减小能源消耗，产品和零部件的回收再生循环或者重新利用。</p>

<p>无论是从工业设计还是软件设计，实际上都是尊崇以上的原则。注意上面几点，可拆卸性，可回收性、可维护性、可重复利用性. 我们就从这里入手重新设计。(PS:无畏的重复开发也算是一种能源消耗吧，嗯，至少我们也是爱护环保人士)</p>

<p>从以往开发Web应用的经验来说，模块的划分可以从业务层面或功能层面上决定。业务层面上，你可以将不同的业务划分成各个子模块，好比公司的各个职能部门，事业一部，事业二部，后勤部门，人事部门等。从业务的层面上划分，会使得各个模块更加独立，不用和其它的部门打交道也能完成日常的事务。不过缺点是，一些如果处理公共的事务将会变得繁琐。 另外一个选择是从功能层面上，比如资料管理，订单管理，财务管理等,优点是职责清晰，不过缺点就是各管一方，事务缺少连续性。</p>

<p>举个实际的例子，有一个功能需求是查询与记录，查询有食物查询，运动查询，体重查询等等。对应的也会有食物记录，运动记录，体重记录。 如果从业务上划分可以是食物管理，运动管理，体重管理，各自记录各自的信息，各自独立，互不干扰。可在一个地方就完成所有操作。但如果现在我们要收集所有的记录信息，并且各自还需要一些协作完成操作的话，这样各个功能之间的协调就会变得困难。 所以还有一个方法是按功能来划分，查询模块，记录模块， 查询模块只负责查询，查询的类型分为三种，然后需要记录的时候将信息传送到记录模块，进行一并记录。这样的好处是当我们职责各加清晰，信息统一。</p>

<p>无伦从哪个角度来划分模块其实都有各自的优缺点，我们需求上来设计实际的项目，即使他们功能独立，减低耦合，又要使得信息的流转变得简单。 理论讲的差不多了，我们这里除开项目管理的基本要求，比如开发文档，注释规范，各种图等不提，拆分的方式根据你自己的业务需求自行选择拆分方式，这里只讲讲开发中如何协调和整合它们。
好吧。下面上干货了。</p>

<h2>iOS 团队开发实践</h2>

<!-- more -->


<p>我们先把现在遇到的问题列出来，然后一一解决。</p>

<ul>
<li>问题: 之前我们在一个大项目里，各自负责各自的功能，代码在一个项目里管理，如果只有一个项目还好说，如果另一个项目需要其中一个功能了，那开发这个功能的人就成了搬砖头的工作泥头工了。</li>
</ul>


<p>解决方案：所以将各个功能按职责剥离出来，各自开发各自的功能模块。能独立运行，能编译为静态库，有完整的内部接口文档。符合上面的可拆卸性，可回收性、可维护性、可重复利用性。</p>

<ul>
<li>问题: 以往各个模块整合在一起时，功能之间的调用基本是通过 import 某个类的接口头文件完成.这样使得某个功能会非常依赖另一接口的实现，假如有一天，一个专门负责这个接口的人换了实现方法或这个接口就不存在了，而又没通知到引用的人，就会发生错误，你也许会说，可以保留原有接口，加上即将作废的提示，然后用替代方法进行转换。或直接告诉团队的成员，使用新的 sdk 等。 但这些操作如果变得非常频繁或不确定就会成为障碍。</li>
</ul>


<p>解决方案：在Rails 框架中有一个叫 Routes表的文件，用来将用户的Web请求定位到某个Controller的某个Action. 我们是不是也可以将调用看作是用户的一次 Web 请求呢。只要存在这样一张 routes 表，就可以将这个请求映射到指定的路径。 所以首先想到的是有一个专门的职能模块去构造这张表，然后维护它，相当于cocoa里的 notification center。 不过和 notification center不同的是，我们的这个 routes 表，也可以称为规则表是在应用启动时就已经创建好了的。相当于智能路由器已经配置好不同的路由方向一样。</p>

<p>如何构建这张表呢，同样在Rails里也会有引用第三方的 Plugin 概念,我们也可以把各个模块看作 Plugin，Plugin自己定义自己的路由规则，然后由 route center将所有的规则合并在一起，如果其中一个模块发生变化，只需要改写自己的routes即可，不需要通知其它引用的人，除非你的命名规则发生变化。</p>

<p>接下来如何构造这个请求呢？通知机制，也就是 notification , 相当于你吼一嗓子，我要去干嘛干嘛,谁来帮我处理。然后 route center 会接收此请求，根据里面的规则转送到指定的模块中处理，这样就减小了他们之间的相互依赖。</p>

<p>在具体实现时，还会有线程选择、广播或点到点方式、立即返回结果等规则的定义。不过需要注意的是可能发会生的广播风暴。</p>

<ul>
<li>问题: 如果模块拆分后，各个模块经常会有第三方库的依赖，各个模块之间也会有所依赖，比如公共库等。如何避免重复引用及引用版本的问题。</li>
</ul>


<p>解决方案：用 cocoapods 软件解决，本身 cocoapods 也是用 ruby 脚本写的工具，所以改起来也比较方便。第三方的依赖全部由它自带的podfile 配置完成，它会根据你的第三方引用打包于项目中，如果遇到多个重复引用时，它会将起合并引用。 我们的各个模块也可以做成独立的 podspecs 文件，供其它模块引用，这样就可以实现了模块的升级与更新。</p>

<ul>
<li>问题: 如果要联合调试时，如何使用呢？比如其中一个功能要与另一个功能进行整合测试时，遇到更改特别频繁的时候，将会是件相当痛苦的事。</li>
</ul>


<p>解决方案：通过git submodule 方式将子模块引入进来，这样你可以在联调时，更改子模块的部分也可以通过 submodule 一并提交。</p>

<ul>
<li>问题: 我们还会遇到在不同的配置环境下，要引入不同的配置，比如 debug 与 release 模式调用的 api 不同情况。</li>
</ul>


<p>解决方案：也同样模拟 rails 的 environments 方式，将项目针对不同的环境生成不同的配置文件。然后定义各自的配置属性。</p>

<p>通过以上架构的调整后，项目模块间将变得非常松散，同时整合在一起时也非常简单，将模块通过 cocoapods 构成依赖，模块间数据的访问基本很少变动，最多只是将 UI 进行定制渲染。如果 UI 再进一步拆分的话，不同的部分 render 不同的内容，将可以变得更加灵活。</p>

<p>参考：</p>

<p><img src="http://doruby.com/assets/one_block_based.png" alt="one block based" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Xcode里,为项目定义不同的环境配置]]></title>
    <link href="http://doruby.com/blog/2013/02/28/env-of-project-on-xcode/"/>
    <updated>2013-02-28T09:30:00+08:00</updated>
    <id>http://doruby.com/blog/2013/02/28/env-of-project-on-xcode</id>
    <content type="html"><![CDATA[<p>有时项目经常需要配置不同的开发环境，比如Debug, QA, Release, Distribution等。每个环境下，会有各自不同的环境配置项，比如变量，常量，宏定义等。</p>

<p>我们最早的方法是先在Build Settings里先设定 Preprocessor Macros CONFIGURATION_$(CONFIGURATION)</p>

<p>这样我们就可以在代码根据该 Macro 来区分现在所处的环境。通过我们是定义在 Prefix.pch 文件里:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#ifdef CONFIGURATION_Debug</span>
</span><span class='line'><span class="cp">#   import &quot;ConfigDebug.h&quot;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#   ...</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在想到的更好的方法是直接修改Prefix Header的引用路径</p>

<p>在 Project 里的 Build Settings 里设定 Prefix Header 文件的导入位置.</p>

<p><img src="http://doruby.com/assets/settingsPrefixHeader.png" alt="settings prefix header" /></p>

<p>比如: Test/Config/Test-Prefix-${CONFIGURATION}.pch</p>

<p>我们新建了一个Config目录，然后在里面添加了 Test-Prefix-Debug.pch , Test-Prefix-Release.pch 等不同的环境配置文件.</p>

<p>Test-Prefix-Debug.pch</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">import</span> <span class="s">&quot;ConfigDebug.h&quot;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test-Prefix-Release.pch</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">import</span> <span class="s">&quot;ConfigRelease.h&quot;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关于各项环境配置应该放在哪儿比较好?</h2>

<!-- more -->


<p>我们有时会定义一些自己的Macro, 通常我们也是象上面一样写在Preprocessor Macros 里。 实际上更好的方法是建立不同的 .xcconfig 文件, 然后将Target的配置指向它们</p>

<p>比如我们建立一个 Debug.xcconfig, Release.xcconfig</p>

<p>将 PROJECT Info => Configurations => target Based on Configuration File 指向不同环境下的config文件。</p>

<p><img src="http://doruby.com/assets/targetConfigurations.png" alt="target configurations" /></p>

<p>我们就可以在这个文件上定义自己的Macro了，比如</p>

<p>Debug.xcconfig</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TestMacroDef</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Release.xcconfig</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TestMacroDef</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以在Build Settings中看到User-Defined一栏多了你自定义的Macro</p>

<p>我们还可以改变或添加系统默认的定义，比如上面在 Preprocessor Macros里定义的内容，可以这样写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">GCC_PREPROCESSOR_DEFINITIONS</span> <span class="o">=</span> <span class="n">kShareKey</span><span class="o">=</span><span class="mi">1</span> <span class="n">$</span><span class="p">(</span><span class="n">inherited</span><span class="p">)</span> <span class="c1">// inherited 是继承原有的定义</span>
</span></code></pre></td></tr></table></div></figure>


<p>tips: 你可以选中settings的一栏copy， paste 到这个文件中，即可知道定义方法。</p>

<p>如果我们有一些公共的配置文件，可以创建一个 公共的 xcconfig 文件，然后 include 进来即可。</p>

<p>比如</p>

<p>Debug.xcconfig</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &quot;Shared.xcconfig&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[点击阴影区关闭打开的Modal View Controller]]></title>
    <link href="http://doruby.com/blog/2013/01/24/close-modal-view-controller-by-tap-the-shadown-region/"/>
    <updated>2013-01-24T11:03:00+08:00</updated>
    <id>http://doruby.com/blog/2013/01/24/close-modal-view-controller-by-tap-the-shadown-region</id>
    <content type="html"><![CDATA[<p>参考：<a href="http://mengxiangping.com/?p=121">Close Modal View Controller by tap the shadow region</a></p>

<p>如何实现用户点击阴影区域，将当前出现的ModalViewController消失
<img src="http://doruby.com/assets/modalViewC.png" alt="modal view controller" /></p>

<p>首先了解一下: UIApplicationMain</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="n">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>argc 与 argv 是标准的c main 函数参数。 第三个参数是接收事件响应的主要对象(principalClassName)，如果存在的话必须是继承UIApplication, 第四个 delegateClassName, 实现 UIApplicationDelegate 中的协议方法.</p>

<p>任何时刻你点击屏幕，principalClassName都会监听, 并执行sendEvent方法, 所以我们只要拦截这个方法，然后做我们想做的事情就可以了。</p>

<h2>实现</h2>

<!-- more -->


<p><strong>测试环境：iOS5, iPad</strong></p>

<p>改变main的第三个参数对象为 我们自己定义的一个 MyAppplication 类。</p>

<p>main.m</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">@&quot;MyApplication&quot;</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="n">class</span><span class="p">]));</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>.h file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyApplication</span> : <span class="nc">UIApplication</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>.m file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;MyApplication.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyApplication</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sendEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="nl">sendEvent:</span><span class="n">event</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 关键是在这里拿到点击事件后,如果判断点击的是阴影区, 阴影区的View 是一个私有类, 名字叫UIDimmingView, 所以如果响应的点击事件是在这个View上的，我们就可以关闭当前的ModalView</span>
</span><span class='line'>  <span class="n">UITouch</span><span class="o">*</span> <span class="n">touch</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">event</span> <span class="n">allTouches</span><span class="p">]</span> <span class="n">allObjects</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">NSStringFromClass</span><span class="p">([[</span><span class="n">touch</span> <span class="n">view</span><span class="p">]</span> <span class="n">class</span><span class="p">])</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;UIDimmingView&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">UIViewController</span> <span class="o">*</span> <span class="n">vc</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">self</span> <span class="n">keyWindow</span><span class="p">]</span> <span class="n">rootViewController</span><span class="p">]</span> <span class="n">presentedViewController</span><span class="p">];</span> <span class="c1">// 找到正在显示的控制器</span>
</span><span class='line'>      <span class="p">[</span><span class="n">vc</span> <span class="nl">dismissModalViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[强大的日志分析工具 -- NSLogger]]></title>
    <link href="http://doruby.com/blog/2012/12/27/hello-world/"/>
    <updated>2012-12-27T16:43:00+08:00</updated>
    <id>http://doruby.com/blog/2012/12/27/hello-world</id>
    <content type="html"><![CDATA[<p>源码：<a href="https://github.com/fpillet/NSLogger">https://github.com/fpillet/NSLogger</a></p>

<p><strong>特点</strong></p>

<ul>
<li>摆脱Xcode的小窗查看日志</li>
<li>不用再将iPhone连接到电脑上才能看日志</li>
<li>支持通过互联网传送日志</li>
<li>可以输出图片的日志</li>
<li>可自己定义日志等级</li>
</ul>


<p><img src="https://github.com/fpillet/NSLogger/raw/master/Screenshots/mainwindow.png" alt="nslogger mainwindow" /></p>

<h2>安装</h2>

<!-- more -->


<p>NSLogger分为两部分，LoggerClient和NSLogger Viewer，
LoggerClient是置入你APP的客户端，NSLogger Viewer是一个mac端日志分析器，NSLogger的日志可以通过网络传输到这个日志分析器中。</p>

<p>NSLogger 支持Pod方式安装,在你的APP中配置Podfile</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="s1">&#39;NSLogger&#39;</span>
</span><span class='line'><span class="n">pod</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>如果不支持Pod，可以直接将LoggerClient文件放入你的APP下.</em></p>

<p><a href="http://doruby.com/assets/NSLoggerViewer.zip">NSLogger Viewer</a> - <em>这是编译好的日志监控客户端 NSLogger Viewer</em></p>

<h2>使用</h2>

<ul>
<li><code>#import "LoggerClient.h"</code></li>
<li>设置客户端网络监控的配置</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">LoggerSetViewerHost</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">CFStringRef</span><span class="p">)</span><span class="err">@“</span><span class="mf">127.0.0.1</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="n">UInt32</span><span class="p">)</span><span class="mi">50000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一段代码可以加在main.m里</p>

<ul>
<li>除了基本的日志可以打印图片的日志</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="n">ONEDefaultImageWithName</span><span class="p">(</span><span class="s">@&quot;actionBar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">CGSize</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="n">LogImageData</span><span class="p">(</span><span class="s">@&quot;image&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">sz</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">img</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>为了不动原来的NSLog输出日志方式，可以重新定义NSLog</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">define</span> <span class="n">NSLog</span><span class="p">(...)</span> <span class="n">LogMessageF</span><span class="p">(</span> <span class="n">__FILE__</span><span class="p">,</span><span class="n">__LINE__</span><span class="p">,</span><span class="n">__FUNCTION__</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">__VA_ARGS__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>打开NSLogger Viewer mac端，在Preferences的Network中，勾选 Listen for loggers on TCP port.端口默认</li>
</ul>


<p><strong>友情提示</strong></p>

<ul>
<li>如果Xcode编译后，没有发送数据到客户端，可以先 clean 一下。</li>
<li>客户端建议用 TCP 协议连接,这样监听端口可以固定</li>
<li>点窗口左下角的 f 可以看到对应的日志文件与行号</li>
</ul>

]]></content>
  </entry>
  
</feed>
